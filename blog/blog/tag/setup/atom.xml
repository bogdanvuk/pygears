<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://docs.pygears.org/</id>
  <title>PyGears - Posts tagged setup</title>
  <updated>2022-02-11T16:16:41.342132+00:00</updated>
  <link href="https://docs.pygears.org/"/>
  <link href="https://docs.pygears.org/blog/tag/setup/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.23">ABlog</generator>
  <entry>
    <id>https://docs.pygears.org/riscv/setup.html</id>
    <title>RISC-V Tools Setup</title>
    <updated>2018-10-07T00:00:00+02:00</updated>
    <author>
      <name>Bogdan Vukobratović</name>
    </author>
    <content type="html">&lt;section id="risc-v-tools-setup"&gt;


&lt;script&gt;
 function changeVerbosity(verbosity) {

     document.getElementById("verbosity_value").value = verbosity;
     document.getElementById("verbosity_slider").value = verbosity;

     var a = document.querySelectorAll('[data-verbosity]');

     for (var i in a) if (a.hasOwnProperty(i)) {
         if (a[i].getAttribute('data-verbosity') &lt;= verbosity) {
             a[i].removeAttribute("hidden")
         } else {
             a[i].setAttribute("hidden", "true")
         }
     }
 }
&lt;/script&gt;

&lt;form class="slidecontainer"&gt;
    &lt;b&gt;Slide to adjust verbosity level&amp;ensp;&lt;/b&gt;
    &lt;input type="range" min="1" max="2" value="1" name="verbositySlider" id="verbosity_slider" onchange="changeVerbosity(this.value);"&gt;
    &amp;ensp;
    &lt;input type="number" maxlength="1" id="verbosity_value" min="1" max="2" value="1" oninput="changeVerbosity(this.value);" style="font-weight: bold"/&gt;
&lt;/form&gt;
&lt;p&gt;This post only explains the setup procedure for the additional tools needed for the RISC-V development. Installation procedure for the PyGears tools has been discussed in the &lt;a class="reference internal" href="../../riscv/introduction.html#riscv-introduction-setup"&gt;&lt;span class="std std-ref"&gt;previous post&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Relevant pygears_riscv git commit: &lt;a class="reference external" href="https://github.com/bogdanvuk/pygears_riscv/tree/bba9a4afe8d20e26f6aef634bc2651fbf8b71c8e"&gt;pygears_riscv&amp;#64;bba9a4a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If I want to approach this project the TDD way, I need to be ready to test the design from the start. Hence, I will start by obtaining the “golden design”, aka “reference model”, aka “test oracle”, depending on the terminology, and setting up the infrastructure to it with PyGears. &lt;span data-verbosity="2" hidden="true"&gt; RISC-V foundation github page offers &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://github.com/riscv/riscv-isa-sim/"&gt;Spike&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt; - RISC-V instruction set simulator which implements the RISC-V functional model. There are more simulators listed on the RISC-V &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://riscv.org/software-status/"&gt;website&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt;, but I’d like to start with the official one. Spike is dependent on some other riscv-tool packages, so I’ll start from &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://github.com/riscv/riscv-isa-sim/"&gt;riscv-tools&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt; repo and its setup instructions.&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev libusb-1.0-0-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev device-tree-compiler pkg-config libexpat-dev

&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;RISCV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tools/riscv-tools

git clone https://github.com/riscv/riscv-tools.git &lt;span class="nv"&gt;$RISCV&lt;/span&gt;/_install
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$RISCV&lt;/span&gt;/_install
git submodule update --init --recursive
./build.sh

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /tools/tools.sh
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;# Environment for riscv-tools&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /tools/tools.sh
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;export RISCV=/tools/riscv-tools&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /tools/tools.sh
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;export PATH=\$RISCV/bin:\$PATH&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /tools/tools.sh
&lt;span class="nb"&gt;source&lt;/span&gt; /tools/tools.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt; This took a while on my laptop, since whole RISC-V GCC compiler toolchain is being downloaded and built. &lt;/span&gt;&lt;span&gt; Finally, lets try if I can simulate a simple program. &lt;/span&gt;&lt;span data-verbosity="2" hidden="true"&gt; Unfortunately, the example given on the riscv-tools github page is for compiling C code. Since I’m interested in testing individual instructions, compiling from C will make too many hoops in the process. I need to be able to directly specify instructions in assembly and avoid as much boilerplate as possible, i.e. main function call and stack manipulation. I started with the instructions provided in &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://github.com/jonesinator/riscv-spike-minimal-assembly/"&gt;riscv-spike-minimal-assembly github repo&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt;. &lt;/span&gt;&lt;span&gt; I ended up with the following simple linker script &lt;/span&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bare.ld&lt;/span&gt;&lt;/code&gt;&lt;span&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SECTIONS&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x80000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt; Why am I placing my code at address &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;0x80000000&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt;? Because nothing else worked. My best guess is that simulator maps RAM at address &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;0x80000000&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; by default and gets angry if you want your code somewhere else. &lt;/span&gt;&lt;span&gt; Next, I created a proof of concept assembly file &lt;/span&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;hello.s&lt;/span&gt;&lt;/code&gt;&lt;span&gt;. &lt;/span&gt;&lt;span data-verbosity="2" hidden="true"&gt; It contains the example instruction that I want to test &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;li&lt;/span&gt; &lt;span class="pre"&gt;a1,&lt;/span&gt; &lt;span class="pre"&gt;1&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; and some boilerplate needed to play nicely with the Spike simulator:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight-ca65 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; # Very simple assembly program that will cause Spike to terminate gracefully.&lt;/span&gt;

&lt;span class="kp"&gt;.text&lt;/span&gt;
  &lt;span class="kp"&gt;.global&lt;/span&gt; &lt;span class="n"&gt;_start&lt;/span&gt;

&lt;span class="nl"&gt;_start:&lt;/span&gt;

  &lt;span class="c1"&gt;;; # The actual instruction I&amp;#39;d like to test.&lt;/span&gt;
&lt;span class="hll"&gt;  &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;
  &lt;span class="c1"&gt;;; # Write the value 1 to tohost, telling Spike to quit with an exit code of 0.&lt;/span&gt;
  &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;la&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tohost&lt;/span&gt;
  &lt;span class="n"&gt;sw&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;;; # Spin until Spike terminates the simulation.&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="c1"&gt;;; # Expose tohost and fromhost to Spike so we can communicate with it.&lt;/span&gt;
&lt;span class="kp"&gt;.data&lt;/span&gt;
  &lt;span class="kp"&gt;.global&lt;/span&gt; &lt;span class="n"&gt;tohost&lt;/span&gt;
&lt;span class="nl"&gt;tohost:&lt;/span&gt;   &lt;span class="kp"&gt;.dword&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="kp"&gt;.global&lt;/span&gt; &lt;span class="n"&gt;fromhost&lt;/span&gt;
&lt;span class="nl"&gt;fromhost:&lt;/span&gt; &lt;span class="kp"&gt;.dword&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt; I learned &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://gnu-mcu-eclipse.github.io/toolchain/riscv/"&gt;here&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt; how to tell the compiler which version of the RISC-V ISA to use. Since I’m starting the hardware implementation from scratch, I’m interested in most basic 32-bit ISA version, hence I need to call GCC with &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;-march=rv32i&lt;/span&gt; &lt;span class="pre"&gt;-mabi=ilp32&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt;. Next, in order to have the code without &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;main()&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt;, you need to provide the &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;-nostdlib&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; flag too, which was hinted in the answer to &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://stackoverflow.com/questions/31390127/how-can-i-compile-c-code-to-get-a-bare-metal-skeleton-of-a-minimal-risc-v-assemb"&gt;this stackoverflow question&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt;. &lt;/span&gt;&lt;span&gt; I ended up with the following command to call GCC:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;riscv64-unknown-elf-gcc -march&lt;span class="o"&gt;=&lt;/span&gt;rv32i -mabi&lt;span class="o"&gt;=&lt;/span&gt;ilp32 -nostdlib -T bare.ld hello.s -o hello
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Execution of this command leaves me with the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;hello&lt;/span&gt;&lt;/code&gt; elf file in the same directory. In order to see the machine code of the instructions and their places in memory, I can run the dissasembler:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-bash notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;riscv64-unknown-elf-objdump -d hello
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="2" hidden="true"&gt;which gives me the following output:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-objdump notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt; hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     file format &lt;span class="s"&gt;elf32-littleriscv&lt;/span&gt;


&lt;span class="x"&gt; Disassembly of section .text:&lt;/span&gt;

&lt;span class="x"&gt; 80000000 &amp;lt;_start&amp;gt;:&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="x"&gt; 80000000:   00100593                li      a1,1&lt;/span&gt;
&lt;/span&gt;&lt;span class="x"&gt; 80000004:   00100293                li      t0,1&lt;/span&gt;
&lt;span class="x"&gt; 80000008:   00000317                auipc   t1,0x0&lt;/span&gt;
&lt;span class="x"&gt; 8000000c:   01030313                addi    t1,t1,16 # 80000018 &amp;lt;tohost&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 80000010:   00532023                sw      t0,0(t1)&lt;/span&gt;
&lt;span class="x"&gt; 80000014:   0000006f                j       80000014 &amp;lt;_start+0x14&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt;Success! The target test instruction is first to be executed, which will simplify my tests. &lt;/span&gt;&lt;span&gt; I can now invoke Spike simulator for the basic 32-bit ISA (&lt;/span&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--isa=rv32i&lt;/span&gt;&lt;/code&gt;&lt;span&gt; option) to test the instruction execution and print the list of the instructions it their execution order (&lt;/span&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-l&lt;/span&gt;&lt;/code&gt;&lt;span&gt; option):&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;spike -l --isa&lt;span class="o"&gt;=&lt;/span&gt;rv32i hello
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Command produces output given below. &lt;/span&gt;&lt;span data-verbosity="2" hidden="true"&gt; Log shows that the simulator inserted 5 additional instructions at address &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;0x1000&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt;, which I guess is the fixed position where the execution starts. Last of these five jumps to my example test instruction, now at address &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;0xffffffff80000000&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt;? Sign extension I guess?&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight-objdump notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; core   0: 0x0000000000001000 (0x00000297) auipc   t0, 0x0&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0x0000000000001004 (0x02028593) addi    a1, t0, 32&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0x0000000000001008 (0xf1402573) csrr    a0, mhartid&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0x000000000000100c (0x0182a283) lw      t0, 24(t0)&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0x0000000000001010 (0x00028067) jr      t0&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="x"&gt; core   0: 0xffffffff80000000 (0x00100593) li      a1, 1&lt;/span&gt;
&lt;/span&gt;&lt;span class="x"&gt; core   0: 0xffffffff80000004 (0x00100293) li      t0, 1&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0xffffffff80000008 (0x00000317) auipc   t1, 0x0&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0xffffffff8000000c (0x01030313) addi    t1, t1, 16&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0xffffffff80000010 (0x00532023) sw      t0, 0(t1)&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0xffffffff80000014 (0x0000006f) j       pc + 0x0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-verbosity="2" hidden="true"&gt;It doesn’t matter anyways because it worked! I’ll probably get more insight into Spike as the time passes and figure exactly what’s happening, but it’s enough for the start. I invoked the simulator in interactive debug mode in order to check how the test instruction alters the processor state. The instruction &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;li&lt;/span&gt; &lt;span class="pre"&gt;a1,&lt;/span&gt; &lt;span class="pre"&gt;1&lt;/span&gt;&lt;/code&gt; should load a value of 1 to the register &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;a1&lt;/span&gt;&lt;/code&gt;. Name &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;li&lt;/span&gt;&lt;/code&gt; stands for “load immediate” since it loads to a register a value that is immediately available in the instruction code. The code of this instruction is &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;0x00100593&lt;/span&gt;&lt;/code&gt;, and there it is, the value of 1 in top three nibbles of the code: &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;0x001&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-bash notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;spike -d --isa&lt;span class="o"&gt;=&lt;/span&gt;rv32i hello
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="2" hidden="true"&gt;I issued the following commands in order to test the value of the register &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;a1&lt;/span&gt;&lt;/code&gt; before and after the test instruction execution to observe the instruction effect. This is exactly what I will do when I start hardware implementation, in order to test it against the reference design which is the Spike simulator.&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-bash notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;: &lt;span class="k"&gt;until&lt;/span&gt; pc &lt;span class="m"&gt;0&lt;/span&gt; 0xffffffff80000000
: reg &lt;span class="m"&gt;0&lt;/span&gt; a1
0x0000000000001020
: run &lt;span class="m"&gt;1&lt;/span&gt;
core   &lt;span class="m"&gt;0&lt;/span&gt;: 0xffffffff80000000 &lt;span class="o"&gt;(&lt;/span&gt;0x00100593&lt;span class="o"&gt;)&lt;/span&gt; li      a1, &lt;span class="m"&gt;1&lt;/span&gt;
: reg &lt;span class="m"&gt;0&lt;/span&gt; a1
0x0000000000000001
: q
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;section id="invoking-from-python"&gt;
&lt;h2&gt;Invoking from Python&lt;/h2&gt;
&lt;p&gt;I’d like to have at least one test per RISC-V instruction I implement and run them as often as possible. Hence I need them automated. Specifically, my automated tests need to check whether an instruction introduces the same changes to the memory and registers in my design as it does in the Spike simulator. Unfortunately, Spike doesn’t offer an option of executing commands from the script, so I’ll have to run it in the interactive mode and send commands to him live. &lt;span data-verbosity="2" hidden="true"&gt; Luckily, the Python library &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://pexpect.readthedocs.io/en/stable/index.html"&gt;pexpect&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt; was created specifically for the task like this. Pexpect will allow me to start Spike from Python, send it some commands and retrieve the responses. I’ll immediately wrap low-level calls to the &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;pexpect&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; library inside a class I’ll name “Spike”, which will provide a high-level interface for querying the memory and register state and stepping through the program. &lt;/span&gt;&lt;span&gt; Let’s put all this functionality inside &lt;/span&gt;&lt;a class="reference external" href="https://github.com/bogdanvuk/pygears_riscv/blob/bba9a4afe8d20e26f6aef634bc2651fbf8b71c8e/pygears_riscv/spike.py"&gt;pygears_riscv/spike.py&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Let’s do the Spike class the right way, by using the &lt;a class="reference external" data-verbosity="2" hidden="true" href="https://docs.python.org/3/reference/datamodel.html#context-managers"&gt;Context Manager&lt;/a&gt; pattern. This pattern asks us to define initialization and cleanup code inside &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;__enter__&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;__exit__&lt;/span&gt;&lt;/code&gt; methods respectively. During the initialization, I’d like to start the Spike simulator, setup some communication parameters and let the simulator run until it reaches the beginning of my set of instructions (first few instructions are injected by the simulator).&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-default notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Spike&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;PROMPT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;: $&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;CODE_BASE_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff80000000&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmd_line&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pexpect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spawnu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Spike&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROMPT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setecho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_traceback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="2" hidden="true"&gt;This allows me to invoke Spike using &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;with&lt;/span&gt;&lt;/code&gt; Python statement:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-default notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This line invokes the initialization routine which opens up&lt;/span&gt;
&lt;span class="c1"&gt;# the communication line with the Spike simulator&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Spike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spike -d --isa=rv32i hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Here, within the with block I can interact with the simulator&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# Simulator is closed outside the with block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="2" hidden="true"&gt;Also, let’s implement some high-level commands that will be used often:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-default notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;until pc 0 &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Spike&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CODE_BASE_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pc 0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Spike&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CODE_BASE_ADDRESS&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;run 1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reg 0 a&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;reg_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="2" hidden="true"&gt;The &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;until()&lt;/span&gt;&lt;/code&gt; method instructs the Spike simulator to run until &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;PC&lt;/span&gt;&lt;/code&gt; reaches a specific address. Since my code starts (for some reason) at address &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;0xffffffff80000000&lt;/span&gt;&lt;/code&gt;, I’ll make &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;until()&lt;/span&gt;&lt;/code&gt; accept addressess in form of the offset to this base address, which will reduce the noise of always needing to write such large numbers.&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;The &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;pc()&lt;/span&gt;&lt;/code&gt; method queries the current value of the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;PC&lt;/span&gt;&lt;/code&gt;, but also returns only the offset to the code base address. The &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;step()&lt;/span&gt;&lt;/code&gt; method instructs the simulator to run the next instruction, and the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg()&lt;/span&gt;&lt;/code&gt; method retrieves the state of a specific register.&lt;/p&gt;
&lt;p&gt;Now, I can interact with Spike on a pretty high level:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;spike&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Spike&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Spike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spike -d --isa=rv32i hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A1 value before: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A1 value after:  &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Which gives me the same results as before when I interacted with the simulator manually. The script above prints:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-default notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A1&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mh"&gt;0x1020&lt;/span&gt;
&lt;span class="n"&gt;A1&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mh"&gt;0x1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://docs.pygears.org/riscv/setup.html" rel="alternate"/>
    <summary>This post only explains the setup procedure for the additional tools needed for the RISC-V development. Installation procedure for the PyGears tools has been discussed in the previous post.</summary>
    <category term="setup" label="setup"/>
    <published>2018-10-07T00:00:00+02:00</published>
  </entry>
</feed>
