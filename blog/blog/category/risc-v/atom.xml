<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://docs.pygears.org/</id>
  <title>PyGears - Posts in RISC-V</title>
  <updated>2022-02-11T16:16:40.860403+00:00</updated>
  <link href="https://docs.pygears.org/"/>
  <link href="https://docs.pygears.org/blog/category/risc-v/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.23">ABlog</generator>
  <entry>
    <id>https://docs.pygears.org/riscv/introduction.html</id>
    <title>RISC-V Blog Series Introduction</title>
    <updated>2018-10-06T00:00:00+02:00</updated>
    <author>
      <name>Bogdan Vukobratović</name>
    </author>
    <content type="html">&lt;section id="risc-v-blog-series-introduction"&gt;


&lt;script&gt;
 function changeVerbosity(verbosity) {

     document.getElementById("verbosity_value").value = verbosity;
     document.getElementById("verbosity_slider").value = verbosity;

     var a = document.querySelectorAll('[data-verbosity]');

     for (var i in a) if (a.hasOwnProperty(i)) {
         if (a[i].getAttribute('data-verbosity') &lt;= verbosity) {
             a[i].removeAttribute("hidden")
         } else {
             a[i].setAttribute("hidden", "true")
         }
     }
 }
&lt;/script&gt;

&lt;form class="slidecontainer"&gt;
    &lt;b&gt;Slide to adjust verbosity level&amp;ensp;&lt;/b&gt;
    &lt;input type="range" min="1" max="2" value="1" name="verbositySlider" id="verbosity_slider" onchange="changeVerbosity(this.value);"&gt;
    &amp;ensp;
    &lt;input type="number" maxlength="1" id="verbosity_value" min="1" max="2" value="1" oninput="changeVerbosity(this.value);" style="font-weight: bold"/&gt;
&lt;/form&gt;
[Omitted long matching line]
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I don’t need to take into the account all the requirements from the start in order to design the architecture before I start the implementation. &lt;span data-verbosity="2" hidden="true"&gt; This means that I will sooner start the implementation and have feedback about my architectural choices and thus avoid catching architectural errors late, which are then most expensive to fix.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I can get an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Minimum_viable_product"&gt;MVP&lt;/a&gt; (Minimum Viable Product) early, which means that I can start &lt;a class="reference external" href="http://softwaretestingfundamentals.com/system-testing/"&gt;system testing&lt;/a&gt; early and try to catch errors in the design’s &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Functional_requirement"&gt;functional requirements&lt;/a&gt; as early as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I can maintain my MVP, so that the customer can try to use the hardware at different stages throughout the development. &lt;span data-verbosity="2" hidden="true"&gt; This offers him a chance to shorten the time-to-market and may provide me with the valuable feedback. This can again lead to the change to the requirements which I would like to have as early as possible.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“Hardware” and “requirements change” are two things that were not meant to go together, but the electronics industry is developing at an ever accelerating pace so this needs to change. &lt;span data-verbosity="2" hidden="true"&gt; This is also recognized by the very authors of the RISC-V ISA, and summed up in their paper &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://people.eecs.berkeley.edu/~bora/Journals/2016/IEEEMicro16.pdf"&gt;AN AGILE APPROACH TO BUILDING RISC-V MICROPROCESSORS&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;section id="why-pygears"&gt;
&lt;h2&gt;Why PyGears?&lt;/h2&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Traditional HDLs and design methodologies built around them are ill-suited for building larger hardware systems, because they offer very few means of abstraction, besides grouping the implementation into modules. Modules are furthermore quite often formed in the wrong way, by bundling various functionalities together because they operate on the same data, even though they serve different purposes. Think big clunky control path state machines with many outputs which are usually the major source of bugs and a major obstacle for adding new features.&lt;/p&gt;
&lt;figure class="align-center" data-verbosity="2" hidden="true" id="figure-1"&gt;
&lt;img alt="../../_images/fsm.png" data-verbosity="2" hidden="true" src="../../_images/fsm.png" style="width: 312.0px; height: 326.0px;" /&gt;
&lt;figcaption&gt;
&lt;p data-verbosity="2" hidden="true"&gt;&lt;span class="caption-text" data-verbosity="2" hidden="true"&gt;Image from &lt;a class="reference external" data-verbosity="2" hidden="true" href="http://ece-research.unm.edu/jimp/codesign/slides/microprogramming.pdf"&gt;&amp;lt;http://ece-research.unm.edu/jimp/codesign/slides/microprogramming.pdf&amp;gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Each of these outputs is probably computed by a functionality that deserves its own module, its own little abstraction. Why are they than being sucked into state machine module monsters? Usually because we either believe that it leads to a more optimized design, or we are afraid of synchronization issues. But wire is a wire even if it leaves the module boundaries, and decent hardware synthesis tools offer inter-module optimization, so we lose next to nothing by factoring out the functionality. As for the synchronization, putting everything in a single module just offers a false sense of security and sweeps the problem under the rug until later when functionality piles up inside the module and pipelining becomes a nightmare, not to mention dealing with synchronization issues between such complex modules.&lt;/p&gt;
[Omitted long matching line]
&lt;div class="figure" id="tikz-1" style="text-align: center"&gt;&lt;p&gt;&lt;img  src="../../_images/tikz-fb469c944d72dd32a859ee29fb8934cda7c66991.png" alt="Figure made with TikZ" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;DTI - Data Transfer Interface&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;[Omitted long line with 2 matches]&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt; Paradigm shift the PyGears framework offers over traditional HDLs is analog to the difference in paradigm between &lt;a class="reference external" data-verbosity="2" hidden="true" href="https://en.wikipedia.org/wiki/Object-oriented_programming"&gt;OOP&lt;/a&gt; (Object Oriented Programming) and &lt;a class="reference external" data-verbosity="2" hidden="true" href="https://en.wikipedia.org/wiki/Functional_programming"&gt;Functional programming&lt;/a&gt;. In OOP, you program in terms of objects, which are in turn formed to enclose certain state and provide operations that depend on that state and can change it. This is very similar to how HDL modules are formed, as discussed earlier in this chapter. On the other hand, in functional programming, you program in terms of functions and types of the data passed between them, which is exactly how you describe hardware with PyGears. It is widely considered that parallel software designs are easier described using functional programming paradigm, so my aim is to show in this blog series that the same holds for the hardware design.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Furthermore, PyGears is written in Python and offers a way to run RTL simulation together with asynchronous Python functions, in which arbitrary functionality for stimulus generation, value checking, logging and gathering statistics. &lt;/span&gt;&lt;span data-verbosity="2" hidden="true"&gt; Some advantages over SystemVerilog are that Python is open-sourced, much more popular, has huge library of packages and has cleaner syntax.&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="why-not-some-of-the-existing-modern-hdls"&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;h2 data-verbosity="2" hidden="true"&gt; Why not some of the existing modern HDLs?&lt;/h2&gt;

&lt;/div&gt;&lt;p data-verbosity="2" hidden="true"&gt;I am aware of several other attempts at higher level HDLs, like: &lt;a class="reference external" data-verbosity="2" hidden="true" href="https://chisel.eecs.berkeley.edu/"&gt;Chisel&lt;/a&gt;, &lt;a class="reference external" data-verbosity="2" hidden="true" href="http://bluespec.com/"&gt;Bluespec&lt;/a&gt;, &lt;a class="reference external" data-verbosity="2" hidden="true" href="http://www.clash-lang.org/"&gt;Clash&lt;/a&gt; and &lt;a class="reference external" data-verbosity="2" hidden="true" href="http://www.myhdl.org/"&gt;MyHDL&lt;/a&gt;. I never dug deeper into these languages, so I’m not able to give an in depth analysis of each of them here. It’s not that I don’t plan to learn them better sometimes, as I’m sure they have many brilliant ideas incorporated, it’s just that they didn’t seem to really offer solutions to the problems discussed in the previous chapter. Even Clash, which takes the functional approach, in my opinion missed the opportunity to really raise the level of abstraction, by still dealing with the individual signals (as opposed to the flow-controlled interfaces in PyGears) and thus significantly lowering the composability of the modules. Other languages mentioned here take state-centric path of the traditional HDLs and so I truly feel that PyGears has to offer something better.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="writing-tests-as-a-design-tool"&gt;
&lt;h2&gt;Writing tests as a design tool&lt;/h2&gt;
&lt;p&gt;Usually the hardware implementation effort is split between the design and verification teams, where the design team leaves all the testing to the verification. I think that this is a bad dichotomy and tend to agree with the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;TDD&lt;/a&gt; (Test-Driven Development) philosophy which points-out the importance of the developers tests. These are the tests written by the designers continuously during the development, which test each of the functional requirements of the design.&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;According to the TDD, the implementation of each functional requirement should be performed in three steps: red, green and refactor:&lt;/p&gt;
&lt;ol class="arabic simple" data-verbosity="2" hidden="true"&gt;
&lt;li data-verbosity="2" hidden="true"&gt;&lt;p data-verbosity="2" hidden="true"&gt;Red: Add tests to verify the functional requirement. Run the tests to check that they fail, which they ought to do since the functionality hasn’t been implemented yet.&lt;/p&gt;&lt;/li&gt;
&lt;li data-verbosity="2" hidden="true"&gt;&lt;p data-verbosity="2" hidden="true"&gt;Green: Work on the functionality implementation until all the tests pass (new ones as well as the ones testing previously implemented requirements).&lt;/p&gt;&lt;/li&gt;
&lt;li data-verbosity="2" hidden="true"&gt;&lt;p data-verbosity="2" hidden="true"&gt;Refactor: Clean-up the code without breaking the tests&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the RISC-V implementation, I plan on treating each instruction in the ISA as a separate functional requirement, so I should have a following flow:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Write a test that feeds the instruction to the processor and checks the memory and register state after the execution against the &lt;a class="reference external" href="https://github.com/riscv/riscv-isa-sim/"&gt;Spike&lt;/a&gt; RISC-V ISA simulator (which will serve as a reference model),&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement the instruction in hardware and verify that the test passes together with all the tests for the previously implemented instructions,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Refactor the processor implementation.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Besides functional correctness, one additional important processor design quality parameter is its throughput. So, in addition to the functional tests for each of the instructions, I plan to use Vivado to test attainable frequency for my design.&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Even though I’m aware of the already proposed architectures for the RISC-V processor (like the one in the &lt;a class="reference external" data-verbosity="2" hidden="true" href="https://www.amazon.com/Computer-Architecture-Quantitative-Approach-Kaufmann/dp/0128119055"&gt;Computer Architecture: A Quantitative Approach&lt;/a&gt;), I will try to blank out the memory of them, and let the new one, guided by the PyGears principles, arise on its own.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="setup"&gt;
&lt;span id="riscv-introduction-setup"&gt;&lt;/span&gt;&lt;h2&gt;Setup&lt;/h2&gt;
[Omitted long matching line]
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;PyGears,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An RTL simulator: I’ll be using mostly Verilator since it is open-source, but I will try to provide an option in the code to run Questa or Cadence simulators as well,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A waveform viewer: I’ll be using GtkWave since again it is open-source, but if you plan on using a proprietary simulator, they will come with a waveform viewer,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A constrained random solver: I’ll try to use &lt;a class="reference external" href="http://www.accellera.org/activities/working-groups/systemc-verification"&gt;SCV&lt;/a&gt;. Again proprietary simulators have support for this too,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Various RISC-V tools, for which I will make further posts on how to setup and use.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ll be using Spacemacs for editing files and running Python scripts, but I’ll try to test the procedures I layout in blog posts on PyCharm as well.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="logistics"&gt;
&lt;h2&gt;Logistics&lt;/h2&gt;
&lt;p&gt;All the files related to the RISC-V implementation will be pyblished inside &lt;a class="reference external" href="https://github.com/bogdanvuk/pygears_riscv"&gt;pygears_riscv&lt;/a&gt; git repository. At the beginning of each blog post, I will state which exact git commit contains code relevant to that post, so that you can get back in history and inspect files at that development stage. Before you can run the scripts from the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pygears_riscv&lt;/span&gt;&lt;/code&gt; repository, you need to set it up:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/bogdanvuk/pygears_riscv.git

&lt;span class="nb"&gt;cd&lt;/span&gt; pygears_riscv

python setup.py develop
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice also a slider at the beginning of the post. It allows you to choose the verbosity of the text. I plan to use it for all future posts in a fashion similar to this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Verbosity level 1: Only as much information as needed to reproduce the results the post is discussing,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verbosity level 2: Additional details and explanations about each of the steps involved in the discussed procedure,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verbosity level 3: Various digressions, brain dumps, detailed results of the procedure steps (log files, command outputs), etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://docs.pygears.org/riscv/introduction.html" rel="alternate"/>
    <summary>Welcome to the blog series in which I’ll be implementing the RISC-V ISA (Instruction Set Architecture) in hardware using functional approach with PyGears. My aim is to show how PyGears offers a way to build hardware in an incremental, evolutionary fashion, where the architecture, implementation and the verification environment evolve together, as opposed to the standard approach where these steps mostly happen in sequence. Developing hardware in such an agile way offers many benefits to the hardware design process, with some of them being that:</summary>
    <published>2018-10-06T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>https://docs.pygears.org/riscv/setup.html</id>
    <title>RISC-V Tools Setup</title>
    <updated>2018-10-07T00:00:00+02:00</updated>
    <author>
      <name>Bogdan Vukobratović</name>
    </author>
    <content type="html">&lt;section id="risc-v-tools-setup"&gt;


&lt;script&gt;
 function changeVerbosity(verbosity) {

     document.getElementById("verbosity_value").value = verbosity;
     document.getElementById("verbosity_slider").value = verbosity;

     var a = document.querySelectorAll('[data-verbosity]');

     for (var i in a) if (a.hasOwnProperty(i)) {
         if (a[i].getAttribute('data-verbosity') &lt;= verbosity) {
             a[i].removeAttribute("hidden")
         } else {
             a[i].setAttribute("hidden", "true")
         }
     }
 }
&lt;/script&gt;

&lt;form class="slidecontainer"&gt;
    &lt;b&gt;Slide to adjust verbosity level&amp;ensp;&lt;/b&gt;
    &lt;input type="range" min="1" max="2" value="1" name="verbositySlider" id="verbosity_slider" onchange="changeVerbosity(this.value);"&gt;
    &amp;ensp;
    &lt;input type="number" maxlength="1" id="verbosity_value" min="1" max="2" value="1" oninput="changeVerbosity(this.value);" style="font-weight: bold"/&gt;
&lt;/form&gt;
&lt;p&gt;This post only explains the setup procedure for the additional tools needed for the RISC-V development. Installation procedure for the PyGears tools has been discussed in the &lt;a class="reference internal" href="../../riscv/introduction.html#riscv-introduction-setup"&gt;&lt;span class="std std-ref"&gt;previous post&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Relevant pygears_riscv git commit: &lt;a class="reference external" href="https://github.com/bogdanvuk/pygears_riscv/tree/bba9a4afe8d20e26f6aef634bc2651fbf8b71c8e"&gt;pygears_riscv&amp;#64;bba9a4a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If I want to approach this project the TDD way, I need to be ready to test the design from the start. Hence, I will start by obtaining the “golden design”, aka “reference model”, aka “test oracle”, depending on the terminology, and setting up the infrastructure to it with PyGears. &lt;span data-verbosity="2" hidden="true"&gt; RISC-V foundation github page offers &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://github.com/riscv/riscv-isa-sim/"&gt;Spike&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt; - RISC-V instruction set simulator which implements the RISC-V functional model. There are more simulators listed on the RISC-V &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://riscv.org/software-status/"&gt;website&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt;, but I’d like to start with the official one. Spike is dependent on some other riscv-tool packages, so I’ll start from &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://github.com/riscv/riscv-isa-sim/"&gt;riscv-tools&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt; repo and its setup instructions.&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev libusb-1.0-0-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev device-tree-compiler pkg-config libexpat-dev

&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;RISCV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tools/riscv-tools

git clone https://github.com/riscv/riscv-tools.git &lt;span class="nv"&gt;$RISCV&lt;/span&gt;/_install
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$RISCV&lt;/span&gt;/_install
git submodule update --init --recursive
./build.sh

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /tools/tools.sh
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;# Environment for riscv-tools&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /tools/tools.sh
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;export RISCV=/tools/riscv-tools&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /tools/tools.sh
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;export PATH=\$RISCV/bin:\$PATH&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /tools/tools.sh
&lt;span class="nb"&gt;source&lt;/span&gt; /tools/tools.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt; This took a while on my laptop, since whole RISC-V GCC compiler toolchain is being downloaded and built. &lt;/span&gt;&lt;span&gt; Finally, lets try if I can simulate a simple program. &lt;/span&gt;&lt;span data-verbosity="2" hidden="true"&gt; Unfortunately, the example given on the riscv-tools github page is for compiling C code. Since I’m interested in testing individual instructions, compiling from C will make too many hoops in the process. I need to be able to directly specify instructions in assembly and avoid as much boilerplate as possible, i.e. main function call and stack manipulation. I started with the instructions provided in &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://github.com/jonesinator/riscv-spike-minimal-assembly/"&gt;riscv-spike-minimal-assembly github repo&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt;. &lt;/span&gt;&lt;span&gt; I ended up with the following simple linker script &lt;/span&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bare.ld&lt;/span&gt;&lt;/code&gt;&lt;span&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SECTIONS&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x80000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt; Why am I placing my code at address &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;0x80000000&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt;? Because nothing else worked. My best guess is that simulator maps RAM at address &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;0x80000000&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; by default and gets angry if you want your code somewhere else. &lt;/span&gt;&lt;span&gt; Next, I created a proof of concept assembly file &lt;/span&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;hello.s&lt;/span&gt;&lt;/code&gt;&lt;span&gt;. &lt;/span&gt;&lt;span data-verbosity="2" hidden="true"&gt; It contains the example instruction that I want to test &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;li&lt;/span&gt; &lt;span class="pre"&gt;a1,&lt;/span&gt; &lt;span class="pre"&gt;1&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; and some boilerplate needed to play nicely with the Spike simulator:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight-ca65 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; # Very simple assembly program that will cause Spike to terminate gracefully.&lt;/span&gt;

&lt;span class="kp"&gt;.text&lt;/span&gt;
  &lt;span class="kp"&gt;.global&lt;/span&gt; &lt;span class="n"&gt;_start&lt;/span&gt;

&lt;span class="nl"&gt;_start:&lt;/span&gt;

  &lt;span class="c1"&gt;;; # The actual instruction I&amp;#39;d like to test.&lt;/span&gt;
&lt;span class="hll"&gt;  &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;
  &lt;span class="c1"&gt;;; # Write the value 1 to tohost, telling Spike to quit with an exit code of 0.&lt;/span&gt;
  &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;la&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tohost&lt;/span&gt;
  &lt;span class="n"&gt;sw&lt;/span&gt; &lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;;; # Spin until Spike terminates the simulation.&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="c1"&gt;;; # Expose tohost and fromhost to Spike so we can communicate with it.&lt;/span&gt;
&lt;span class="kp"&gt;.data&lt;/span&gt;
  &lt;span class="kp"&gt;.global&lt;/span&gt; &lt;span class="n"&gt;tohost&lt;/span&gt;
&lt;span class="nl"&gt;tohost:&lt;/span&gt;   &lt;span class="kp"&gt;.dword&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="kp"&gt;.global&lt;/span&gt; &lt;span class="n"&gt;fromhost&lt;/span&gt;
&lt;span class="nl"&gt;fromhost:&lt;/span&gt; &lt;span class="kp"&gt;.dword&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt; I learned &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://gnu-mcu-eclipse.github.io/toolchain/riscv/"&gt;here&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt; how to tell the compiler which version of the RISC-V ISA to use. Since I’m starting the hardware implementation from scratch, I’m interested in most basic 32-bit ISA version, hence I need to call GCC with &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;-march=rv32i&lt;/span&gt; &lt;span class="pre"&gt;-mabi=ilp32&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt;. Next, in order to have the code without &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;main()&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt;, you need to provide the &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;-nostdlib&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; flag too, which was hinted in the answer to &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://stackoverflow.com/questions/31390127/how-can-i-compile-c-code-to-get-a-bare-metal-skeleton-of-a-minimal-risc-v-assemb"&gt;this stackoverflow question&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt;. &lt;/span&gt;&lt;span&gt; I ended up with the following command to call GCC:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;riscv64-unknown-elf-gcc -march&lt;span class="o"&gt;=&lt;/span&gt;rv32i -mabi&lt;span class="o"&gt;=&lt;/span&gt;ilp32 -nostdlib -T bare.ld hello.s -o hello
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Execution of this command leaves me with the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;hello&lt;/span&gt;&lt;/code&gt; elf file in the same directory. In order to see the machine code of the instructions and their places in memory, I can run the dissasembler:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-bash notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;riscv64-unknown-elf-objdump -d hello
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="2" hidden="true"&gt;which gives me the following output:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-objdump notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt; hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     file format &lt;span class="s"&gt;elf32-littleriscv&lt;/span&gt;


&lt;span class="x"&gt; Disassembly of section .text:&lt;/span&gt;

&lt;span class="x"&gt; 80000000 &amp;lt;_start&amp;gt;:&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="x"&gt; 80000000:   00100593                li      a1,1&lt;/span&gt;
&lt;/span&gt;&lt;span class="x"&gt; 80000004:   00100293                li      t0,1&lt;/span&gt;
&lt;span class="x"&gt; 80000008:   00000317                auipc   t1,0x0&lt;/span&gt;
&lt;span class="x"&gt; 8000000c:   01030313                addi    t1,t1,16 # 80000018 &amp;lt;tohost&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; 80000010:   00532023                sw      t0,0(t1)&lt;/span&gt;
&lt;span class="x"&gt; 80000014:   0000006f                j       80000014 &amp;lt;_start+0x14&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt;Success! The target test instruction is first to be executed, which will simplify my tests. &lt;/span&gt;&lt;span&gt; I can now invoke Spike simulator for the basic 32-bit ISA (&lt;/span&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--isa=rv32i&lt;/span&gt;&lt;/code&gt;&lt;span&gt; option) to test the instruction execution and print the list of the instructions it their execution order (&lt;/span&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-l&lt;/span&gt;&lt;/code&gt;&lt;span&gt; option):&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;spike -l --isa&lt;span class="o"&gt;=&lt;/span&gt;rv32i hello
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Command produces output given below. &lt;/span&gt;&lt;span data-verbosity="2" hidden="true"&gt; Log shows that the simulator inserted 5 additional instructions at address &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;0x1000&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt;, which I guess is the fixed position where the execution starts. Last of these five jumps to my example test instruction, now at address &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;0xffffffff80000000&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt;? Sign extension I guess?&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight-objdump notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt; core   0: 0x0000000000001000 (0x00000297) auipc   t0, 0x0&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0x0000000000001004 (0x02028593) addi    a1, t0, 32&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0x0000000000001008 (0xf1402573) csrr    a0, mhartid&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0x000000000000100c (0x0182a283) lw      t0, 24(t0)&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0x0000000000001010 (0x00028067) jr      t0&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="x"&gt; core   0: 0xffffffff80000000 (0x00100593) li      a1, 1&lt;/span&gt;
&lt;/span&gt;&lt;span class="x"&gt; core   0: 0xffffffff80000004 (0x00100293) li      t0, 1&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0xffffffff80000008 (0x00000317) auipc   t1, 0x0&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0xffffffff8000000c (0x01030313) addi    t1, t1, 16&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0xffffffff80000010 (0x00532023) sw      t0, 0(t1)&lt;/span&gt;
&lt;span class="x"&gt; core   0: 0xffffffff80000014 (0x0000006f) j       pc + 0x0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-verbosity="2" hidden="true"&gt;It doesn’t matter anyways because it worked! I’ll probably get more insight into Spike as the time passes and figure exactly what’s happening, but it’s enough for the start. I invoked the simulator in interactive debug mode in order to check how the test instruction alters the processor state. The instruction &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;li&lt;/span&gt; &lt;span class="pre"&gt;a1,&lt;/span&gt; &lt;span class="pre"&gt;1&lt;/span&gt;&lt;/code&gt; should load a value of 1 to the register &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;a1&lt;/span&gt;&lt;/code&gt;. Name &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;li&lt;/span&gt;&lt;/code&gt; stands for “load immediate” since it loads to a register a value that is immediately available in the instruction code. The code of this instruction is &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;0x00100593&lt;/span&gt;&lt;/code&gt;, and there it is, the value of 1 in top three nibbles of the code: &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;0x001&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-bash notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;spike -d --isa&lt;span class="o"&gt;=&lt;/span&gt;rv32i hello
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="2" hidden="true"&gt;I issued the following commands in order to test the value of the register &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;a1&lt;/span&gt;&lt;/code&gt; before and after the test instruction execution to observe the instruction effect. This is exactly what I will do when I start hardware implementation, in order to test it against the reference design which is the Spike simulator.&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-bash notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;: &lt;span class="k"&gt;until&lt;/span&gt; pc &lt;span class="m"&gt;0&lt;/span&gt; 0xffffffff80000000
: reg &lt;span class="m"&gt;0&lt;/span&gt; a1
0x0000000000001020
: run &lt;span class="m"&gt;1&lt;/span&gt;
core   &lt;span class="m"&gt;0&lt;/span&gt;: 0xffffffff80000000 &lt;span class="o"&gt;(&lt;/span&gt;0x00100593&lt;span class="o"&gt;)&lt;/span&gt; li      a1, &lt;span class="m"&gt;1&lt;/span&gt;
: reg &lt;span class="m"&gt;0&lt;/span&gt; a1
0x0000000000000001
: q
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;section id="invoking-from-python"&gt;
&lt;h2&gt;Invoking from Python&lt;/h2&gt;
&lt;p&gt;I’d like to have at least one test per RISC-V instruction I implement and run them as often as possible. Hence I need them automated. Specifically, my automated tests need to check whether an instruction introduces the same changes to the memory and registers in my design as it does in the Spike simulator. Unfortunately, Spike doesn’t offer an option of executing commands from the script, so I’ll have to run it in the interactive mode and send commands to him live. &lt;span data-verbosity="2" hidden="true"&gt; Luckily, the Python library &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://pexpect.readthedocs.io/en/stable/index.html"&gt;pexpect&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt; was created specifically for the task like this. Pexpect will allow me to start Spike from Python, send it some commands and retrieve the responses. I’ll immediately wrap low-level calls to the &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;pexpect&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; library inside a class I’ll name “Spike”, which will provide a high-level interface for querying the memory and register state and stepping through the program. &lt;/span&gt;&lt;span&gt; Let’s put all this functionality inside &lt;/span&gt;&lt;a class="reference external" href="https://github.com/bogdanvuk/pygears_riscv/blob/bba9a4afe8d20e26f6aef634bc2651fbf8b71c8e/pygears_riscv/spike.py"&gt;pygears_riscv/spike.py&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Let’s do the Spike class the right way, by using the &lt;a class="reference external" data-verbosity="2" hidden="true" href="https://docs.python.org/3/reference/datamodel.html#context-managers"&gt;Context Manager&lt;/a&gt; pattern. This pattern asks us to define initialization and cleanup code inside &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;__enter__&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;__exit__&lt;/span&gt;&lt;/code&gt; methods respectively. During the initialization, I’d like to start the Spike simulator, setup some communication parameters and let the simulator run until it reaches the beginning of my set of instructions (first few instructions are injected by the simulator).&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-default notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Spike&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;PROMPT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;: $&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;CODE_BASE_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff80000000&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd_line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmd_line&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pexpect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spawnu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Spike&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROMPT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setecho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_traceback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="2" hidden="true"&gt;This allows me to invoke Spike using &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;with&lt;/span&gt;&lt;/code&gt; Python statement:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-default notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This line invokes the initialization routine which opens up&lt;/span&gt;
&lt;span class="c1"&gt;# the communication line with the Spike simulator&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Spike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spike -d --isa=rv32i hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Here, within the with block I can interact with the simulator&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# Simulator is closed outside the with block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="2" hidden="true"&gt;Also, let’s implement some high-level commands that will be used often:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-default notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;until pc 0 &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Spike&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CODE_BASE_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pc 0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Spike&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CODE_BASE_ADDRESS&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;run 1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reg 0 a&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;reg_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="2" hidden="true"&gt;The &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;until()&lt;/span&gt;&lt;/code&gt; method instructs the Spike simulator to run until &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;PC&lt;/span&gt;&lt;/code&gt; reaches a specific address. Since my code starts (for some reason) at address &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;0xffffffff80000000&lt;/span&gt;&lt;/code&gt;, I’ll make &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;until()&lt;/span&gt;&lt;/code&gt; accept addressess in form of the offset to this base address, which will reduce the noise of always needing to write such large numbers.&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;The &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;pc()&lt;/span&gt;&lt;/code&gt; method queries the current value of the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;PC&lt;/span&gt;&lt;/code&gt;, but also returns only the offset to the code base address. The &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;step()&lt;/span&gt;&lt;/code&gt; method instructs the simulator to run the next instruction, and the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg()&lt;/span&gt;&lt;/code&gt; method retrieves the state of a specific register.&lt;/p&gt;
&lt;p&gt;Now, I can interact with Spike on a pretty high level:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;spike&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Spike&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Spike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spike -d --isa=rv32i hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A1 value before: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A1 value after:  &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Which gives me the same results as before when I interacted with the simulator manually. The script above prints:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-default notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A1&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mh"&gt;0x1020&lt;/span&gt;
&lt;span class="n"&gt;A1&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mh"&gt;0x1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://docs.pygears.org/riscv/setup.html" rel="alternate"/>
    <summary>This post only explains the setup procedure for the additional tools needed for the RISC-V development. Installation procedure for the PyGears tools has been discussed in the previous post.</summary>
    <category term="setup" label="setup"/>
    <published>2018-10-07T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>https://docs.pygears.org/riscv/my_first_instruction.html</id>
    <title>My First Instruction</title>
    <updated>2018-10-30T00:00:00+01:00</updated>
    <author>
      <name>Bogdan Vukobratović</name>
    </author>
    <content type="html">&lt;section id="my-first-instruction"&gt;


&lt;script&gt;
 function changeVerbosity(verbosity) {

     document.getElementById("verbosity_value").value = verbosity;
     document.getElementById("verbosity_slider").value = verbosity;

     var a = document.querySelectorAll('[data-verbosity]');

     for (var i in a) if (a.hasOwnProperty(i)) {
         if (a[i].getAttribute('data-verbosity') &lt;= verbosity) {
             a[i].removeAttribute("hidden")
         } else {
             a[i].setAttribute("hidden", "true")
         }
     }
 }
&lt;/script&gt;

&lt;form class="slidecontainer"&gt;
    &lt;b&gt;Slide to adjust verbosity level&amp;ensp;&lt;/b&gt;
    &lt;input type="range" min="1" max="3" value="1" name="verbositySlider" id="verbosity_slider" onchange="changeVerbosity(this.value);"&gt;
    &amp;ensp;
    &lt;input type="number" maxlength="1" id="verbosity_value" min="1" max="3" value="1" oninput="changeVerbosity(this.value);" style="font-weight: bold"/&gt;
&lt;/form&gt;
&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt; First instruction is probably going to be unlike any other in the amount of work that I’ll need to put into implementing it, so it deserves a post on its own. &lt;/span&gt;&lt;span&gt; Let’s start from the RV32I description in the (currently) latest version of the &lt;/span&gt;&lt;a class="reference external" href="https://content.riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf"&gt;RISC-V ISA Specification&lt;/a&gt;&lt;span&gt;, which is given in the &lt;/span&gt;&lt;a class="reference external" href="https://content.riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf#page=21"&gt;Chapter 2: RV32I Base Integer Instruction Set&lt;/a&gt;&lt;span&gt;. The specification first goes on to describe &lt;/span&gt;&lt;a class="reference external" href="https://content.riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf#page=25"&gt;Integer Computational Instructions (Chapter 2.4)&lt;/a&gt;&lt;span&gt;, of which the &lt;/span&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;addi&lt;/span&gt;&lt;/code&gt;&lt;span&gt; instruction is explained first, so let’s start with that one.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Relevant pygears_riscv git commit: &lt;a class="reference external" href="https://github.com/bogdanvuk/pygears_riscv/tree/a7d98ec"&gt;pygears_riscv&amp;#64;a7d98ec&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt;All RV32I instructions are encoded with 32 bits using several formats (although there is also a &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://content.riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf#page=81"&gt;Compressed Instruction Formats (Chapter 12.2)&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt; but I’ll leave that for later). All the information needed for the instruction execution has to be encoded in 32 bits and these formats specify where exactly is each peace of information located within these 32 bits. Usually the instruction needs to specify which operation to perform (&lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;opcode&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; and &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;funct&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; fields), which registers are involved (&lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;rs&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; - register source or &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;rd&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; - register destination), and usually provides some immediate values as arguments (&lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;imm&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; fields). &lt;/span&gt;&lt;span data-verbosity="3" hidden="true"&gt; One of the key advantages of the RISC-V ISA is that pieces of information of the same type (like &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;rd&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="3" hidden="true"&gt; field) are usually located at the same position within the 32 bit encoding for different formats, which proved to simplify the hardware implementation.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt;For RV32I, a set of 32 registers is needed, named &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;x0&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; - &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;x31&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt;, where &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;x0&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; is different from the others in that it has a fixed value of 0, i.e it’s value cannot be changed. The ISA specification defines the &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;XLEN&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; parameter to represent the width of the registers in number of bits: either 32 or 64. &lt;/span&gt;&lt;span data-verbosity="3" hidden="true"&gt; I’ll try to keep &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;XLEN&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="3" hidden="true"&gt; a design parameter of the processor implementation, but I’ll first focus on a version with &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;XLEN=32&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="3" hidden="true"&gt;, i.e with the processor version with 32 bit wide registers.&lt;/span&gt;&lt;/p&gt;
&lt;section id="instruction-format"&gt;
&lt;h2&gt;Instruction format&lt;/h2&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;addi&lt;/span&gt;&lt;/code&gt; instruction has an “Integer Register-Immediate” format, aka the “I-type” format shown below. &lt;span data-verbosity="2" hidden="true"&gt; The instruction is executed by adding the value of the 12 bit immediate field &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;imm&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; to the value read from the register specified by the &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;rs1&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; field. The result is then truncated to &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;XLEN&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; bits and stored into the register specified by the &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;rd&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; field.&lt;/span&gt;&lt;/p&gt;
&lt;figure class="align-center" id="figure-1"&gt;
&lt;img alt="../../_images/integer-register-immediate-instruction.png" src="../../_images/integer-register-immediate-instruction.png" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;“Integer Register-Immediate” instruction format, aka the “I-type” format, from the &lt;a class="reference external" href="https://content.riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf"&gt;RISC-V ISA Specification&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Since the instruction encodings have fields that serve different purposes from one another, I’ll represent the instruction with the &lt;code class="xref any docutils literal notranslate"&gt;&lt;span class="pre"&gt;typing/tuple&lt;/span&gt;&lt;/code&gt; PyGears type. &lt;span data-verbosity="2" hidden="true"&gt; The &lt;/span&gt;&lt;code class="xref any docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;typing/tuple&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; type represents a generic heterogeneous container type akin to records and structs in other HDLs, and I can specify the names and types of the fields by providing a Python dict in square brackets which maps field names to the field types. &lt;/span&gt;&lt;span&gt; For the “I-type” instructions, I ended-up with a following definition in PyGears, given in &lt;/span&gt;&lt;a class="reference external" href="https://github.com/bogdanvuk/pygears_riscv/blob/a7d98ec/pygears_riscv/riscv/riscv.py"&gt;pygears_riscv/riscv/riscv.py&lt;/a&gt;&lt;span&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;dl class="data"&gt;
&lt;dt id="TInstructionI"&gt;
&lt;code class="sig-name descname"&gt;TInstructionI&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TInstructionI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;opcode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Uint&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;rd&amp;#39;&lt;/span&gt;    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Uint&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;funct3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Uint&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;rs1&amp;#39;&lt;/span&gt;   &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Uint&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;imm&amp;#39;&lt;/span&gt;   &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;&lt;/dl&gt;

&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt;The &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;opcode&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; and &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;funct3&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; fields determine the function to be executed, and &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;rd&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt;, &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;rs1&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; and &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;imm&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; fields carry the function arguments. The &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;opcode&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; and &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;funct3&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; fields store the ID of the function, so I can represent them with an unsigned number, i.e the &lt;/span&gt;&lt;code class="xref any docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;typing/uint&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; PyGears type. &lt;/span&gt;&lt;span data-verbosity="3" hidden="true"&gt; An enumerated type might constrain this fields better, since not all function IDs might be available in a specific processor implementation (after this blog post I will have implemented only one function - &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;addi&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="3" hidden="true"&gt;). However, PyGears doesn’t yet have enumerated types, so I’ll use the &lt;/span&gt;&lt;code class="xref any docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;typing/uint&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="3" hidden="true"&gt; type as the second best.&lt;/span&gt;&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Values of the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;rs1&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;rd&lt;/span&gt;&lt;/code&gt; fields contain the IDs of the registers involved, hence they are 5 bit wide so that they can encode all 32 register IDs, hence they are represented by the &lt;code class="xref any docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;Uint[5]&lt;/span&gt;&lt;/code&gt; type. ISA specifies that &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;addi&lt;/span&gt;&lt;/code&gt; as a signed operation, and that the values in the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;imm&lt;/span&gt;&lt;/code&gt; field are encoded as signed integers, so I’ll use &lt;code class="xref any docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;Int[12]&lt;/span&gt;&lt;/code&gt; type here.&lt;/p&gt;
&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt;Now any gear that operates on the &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;imm&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; field can, if needed, automatically adjust its operation to handle the signed numbers correctly, and I don’t have to worry about it for every gear explicitly. &lt;/span&gt;&lt;span data-verbosity="3" hidden="true"&gt; This is a major advantage of the typing system, since I can express my intents using the type (like with &lt;/span&gt;&lt;code class="xref any docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;Int&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="3" hidden="true"&gt; here) in a single place in the code, and this intent will propagate automatically throughout the design. Traditional HDLs offer only rudimentary typing support, so you need to follow you signals around and explicitly. However, just specifying the type is only a half of the story. The other half lies in providing the &lt;/span&gt;&lt;a class="reference external" data-verbosity="3" hidden="true" href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)"&gt;polymorphic&lt;/a&gt;&lt;span data-verbosity="3" hidden="true"&gt; behavior for the modules, so that they automatically accommodate for different data types.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt; OK, so now we have the &lt;/span&gt;&lt;a class="reference internal" data-verbosity="2" hidden="true" href="../../riscv/my_first_instruction.html#TInstructionI" title="TInstructionI"&gt;&lt;code class="xref py py-data docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;TInstructionI&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt; type, that describes the general format for the “I-type” instructions, and my &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;addi&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; instruction will be an instance of this type. &lt;/span&gt;&lt;span&gt; As I said, &lt;/span&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;opcode&lt;/span&gt;&lt;/code&gt;&lt;span&gt; and &lt;/span&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;funct3&lt;/span&gt;&lt;/code&gt;&lt;span&gt; will have unique, specific value for the &lt;/span&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;addi&lt;/span&gt;&lt;/code&gt;&lt;span&gt; instruction which is specified by ISA. I had to consult &lt;/span&gt;&lt;a class="reference external" href="https://content.riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf#page=115"&gt;Chapter 19: RV32/64G Instruction Set Listings&lt;/a&gt;&lt;span&gt; in order to get the correct values for the function ID fields: &lt;/span&gt;&lt;code class="code highlight py docutils literal notranslate"&gt;&lt;span class="n"&gt;&lt;span class="pre"&gt;opcode&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class="mh"&gt;&lt;span class="pre"&gt;0x13&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span&gt; and &lt;/span&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;funct3=0x0&lt;/span&gt;&lt;/code&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;figure class="align-center" id="figure-2"&gt;
&lt;img alt="../../_images/addi-instruction-field-value.png" src="../../_images/addi-instruction-field-value.png" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;addi&lt;/span&gt;&lt;/code&gt; instruction format, from &lt;a class="reference external" href="https://content.riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf"&gt;RISC-V ISA Specification&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Other instruction fields: &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rd&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rs1&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;imm&lt;/span&gt;&lt;/code&gt;, can take arbitrary values, so I can’t fix those in advance. This gives me the following template for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;addi&lt;/span&gt;&lt;/code&gt; instruction:&lt;/p&gt;
&lt;dl class="data"&gt;
&lt;dt id="OPCODE_IMM"&gt;
&lt;code class="sig-name descname"&gt;OPCODE_IMM&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="code highlight py docutils literal notranslate"&gt;&lt;span class="n"&gt;&lt;span class="pre"&gt;OPCODE_IMM&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span class="mh"&gt;&lt;span class="pre"&gt;0x13&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;&lt;/dl&gt;

&lt;dl class="data"&gt;
&lt;dt id="FUNCT3_ADDI"&gt;
&lt;code class="sig-name descname"&gt;FUNCT3_ADDI&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="code highlight py docutils literal notranslate"&gt;&lt;span class="n"&gt;&lt;span class="pre"&gt;FUNCT3_ADDI&lt;/span&gt;&lt;/span&gt; &lt;span class="o"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span class="mh"&gt;&lt;span class="pre"&gt;0x0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;&lt;/dl&gt;

&lt;dl class="data"&gt;
&lt;dt id="ADDI"&gt;
&lt;code class="sig-name descname"&gt;ADDI&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ADDI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TInstructionI&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;opcode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;OPCODE_IMM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;rd&amp;#39;&lt;/span&gt;    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;funct3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FUNCT3_ADDI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;rs1&amp;#39;&lt;/span&gt;   &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;imm&amp;#39;&lt;/span&gt;   &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;&lt;/dl&gt;

&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt; Since PyGears doesn’t have templates for type instances, all I can do is assign some default values to the fields whose values can change. &lt;/span&gt;&lt;span data-verbosity="3" hidden="true"&gt; Maybe its worth considering whether true generic templates (with generic parameters) for the type instances would add anything of value (or researching if there are languages that support these). In that case, instead of zeros above, the fields would be assigned some template placeholder names, that would need to be assigned values later. Prolog does something like that?&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="processor-implementation"&gt;
&lt;h2&gt;Processor implementation&lt;/h2&gt;
&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt; Since the idea of this blog series is to show how one can evolve a complex hardware design using PyGears without wasted effort, by implementing one feature at a time, I will turn a blind eye to the fact that RISC-V processor needs to support multiple instructions at this moment. I will exclude the PC manipulation functionality, which gets important once jump instructions get into play, and the interface to the data memory, which gets important once load and store instructions git into play. For now I will move the &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://github.com/bogdanvuk/pygears_riscv/blob/a7d98ec/pygears_riscv/verif/register_file.py"&gt;register file&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt; outside the processor into a separate module and implement it in pure Python to ease reading and writing for the verification purposes. &lt;/span&gt;&lt;span data-verbosity="3" hidden="true"&gt; Later, I’ll provide an RTL implementation of the register file, but it is a simple module and it should be a straightforward design process, so I don’t feel like cheating for postponing it. &lt;/span&gt;&lt;span data-verbosity="2" hidden="true"&gt; Important concepts for describing gears are sketched-out in this &lt;/span&gt;&lt;span class="xref std std-ref" data-verbosity="2" hidden="true"&gt;Quick Introduction&lt;/span&gt;&lt;span data-verbosity="2" hidden="true"&gt; documentation page. &lt;/span&gt;&lt;span&gt; Without further ado, this single-instruction capable RISC-V processor written in PyGears looks like this:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@gear&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;riscv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TInstructionI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Uint&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;xlen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;

    &lt;span class="n"&gt;reg_file_rd_req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rs1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;reg_data_signed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reg_data&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="n"&gt;add_res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg_data_signed&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; \
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;reg_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;

    &lt;span class="n"&gt;reg_file_wr_req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ccat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;add_res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reg_file_rd_req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg_file_wr_req&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Let’s dig deeper into those 6 lines of code. The &lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="nd" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;&amp;#64;gear&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; statement is called a decorator in Python terminology. If it is placed in front of the function definition it can wrap it with some additional code. The &lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="nd" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;&amp;#64;gear&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; decorator is where most of the magic happens in PyGears. It makes a function composable via  ‘|’ (pipe) operator, it performs type checking and matching, it instantiates a new hardware module each time the function is called, it takes care about module hierarchy, etc.&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Next, the &lt;a class="reference external" data-verbosity="2" hidden="true" href="https://en.wikipedia.org/wiki/Function_prototype"&gt;function prototype&lt;/a&gt;  declares the types of input interfaces the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv&lt;/span&gt;&lt;/code&gt; gear accepts, namely: &lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;instruction&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;:&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;TInstructionI&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; and &lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_data&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;:&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;Uint&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class="s1" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;‘xlen’&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;. So on the first interface &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv&lt;/span&gt;&lt;/code&gt; expects to see a flow of instructions of the “I-type” format, and on the second, the operation argument read from the register determined by the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;rs1&lt;/span&gt;&lt;/code&gt; field (&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv&lt;/span&gt;&lt;/code&gt; gear will issue these read requests as we’ll see in the moment). For the details on how PyGears implements interfaces in HDL, checkout the PyGears documentation section &lt;span class="xref std std-ref" data-verbosity="2" hidden="true"&gt;One Interface&lt;/span&gt;. The &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv&lt;/span&gt;&lt;/code&gt; gear is implemented via the gear composition, so I needn’t specify the output interface types since they will be determined by the interfaces returned from the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv()&lt;/span&gt;&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt;In order to instantiate the &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; gear, all the input interfaces need to be specified as arguments to the &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; gear function. Inside the &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;gear&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; function, &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;instruction&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; and &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_data&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; become local variables that bring the interface objects from the outside and distribute them to the internal gears. &lt;/span&gt;&lt;span&gt; Image below shows the resulting processor structure and connection with its environment. &lt;/span&gt;&lt;span data-verbosity="2" hidden="true"&gt; The graph was auto-generated with the &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://github.com/bogdanvuk/pygears_riscv/blob/a7d98ec/script/riscv_graph.py"&gt;riscv_graph.py script&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;figure class="align-center" id="figure-3"&gt;
&lt;img alt="../../_images/riscv_graph_addi.png" src="../../_images/riscv_graph_addi.png" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Graph of the single-instruction RISC-V processor implementation in PyGears. The gears are drown as octagons and hierarchical modules are drawn as boxes.&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p data-verbosity="2" hidden="true"&gt;[Omitted long line with 1 matches]&lt;/p&gt;
&lt;p data-verbosity="3" hidden="true"&gt;[Omitted long line with 1 matches]&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Next, data read from the register file is cast to an &lt;code class="xref any docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;Int&lt;/span&gt;&lt;/code&gt; to be interpreted as a signed number: &lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_data_signed&lt;/span&gt;&lt;/span&gt; &lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_data&lt;/span&gt;&lt;/span&gt; &lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class="nb" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_data&lt;/span&gt;&lt;/span&gt;&lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;dtype&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;)]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;. The expression: &lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="nb" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_data&lt;/span&gt;&lt;/span&gt;&lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;dtype&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; is used to retrieve the width of the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_data&lt;/span&gt;&lt;/code&gt; interface type, and the &lt;code class="xref any docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;Int&lt;/span&gt;&lt;/code&gt; type is made to be of that same width. The &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_data_signed&lt;/span&gt;&lt;/code&gt; variable carries the output signed interface of this operation This results in the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;cast_reg_data&lt;/span&gt;&lt;/code&gt; gear shown in the graph.&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Then, the signed addition is performed between the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_data_signed&lt;/span&gt;&lt;/code&gt; and the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;imm&lt;/span&gt;&lt;/code&gt; instruction field, resulting in the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;add&lt;/span&gt;&lt;/code&gt; gear in the graph. Finally, the addition result is cast back to the type of the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_data&lt;/span&gt;&lt;/code&gt; interface: &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_data.dtype&lt;/span&gt;&lt;/code&gt;, which truncates the result by 1 bit and changes its type back to the unsigned integer. The interface carrying the result of these operations is stored in the variable &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;add_res&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Next, the write request &lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_file_wr_req&lt;/span&gt;&lt;/span&gt; &lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;ccat&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;instruction&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class="s1" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;‘rd’&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;],&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;add_res&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; is formed, with which the register file is instructed to store the result of the addition (variable &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;add_res&lt;/span&gt;&lt;/code&gt;) into the register specified by the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;rd&lt;/span&gt;&lt;/code&gt; instruction field. These two pieces of information are combined in a &lt;code class="xref any docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;typing/tuple&lt;/span&gt;&lt;/code&gt; by using &lt;code class="xref any docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;ccat&lt;/span&gt;&lt;/code&gt; (short for concatenation) gear from the &lt;code class="xref any docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;pygears.lib&lt;/span&gt;&lt;/code&gt; library.&lt;/p&gt;
&lt;p&gt;The read and write requests are output from the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;riscv&lt;/span&gt;&lt;/code&gt; gear by outputting them from the function, and will be connected to the inputs of the register file module in a higher hierarchy level.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="verification-environment"&gt;
&lt;h2&gt;Verification environment&lt;/h2&gt;
&lt;p&gt;For testing the ISA implementation, I’ve envisioned the following test:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Initialize the register file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Send a stream of instructions to the processor&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check the final register values to the reference design&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ve written an environment that supports these kinds of tests in &lt;a class="reference external" href="https://github.com/bogdanvuk/pygears_riscv/blob/a7d98ec/pygears_riscv/verif/env.py"&gt;pygears_riscv/verif/env.py&lt;/a&gt;. This is a regular Python function (not a gear) that instantiates the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;riscv&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;register_file&lt;/span&gt;&lt;/code&gt; gears and wires them properly in the following manner.&lt;/p&gt;
&lt;img alt="riscv/images/addi-env-block-diagram.png" class="align-center" src="riscv/images/addi-env-block-diagram.png" style="width: 80%;" /&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Relevant part of the &lt;a class="reference internal" data-verbosity="2" hidden="true" href="../../riscv/my_first_instruction.html#riscv_instr_seq_env" title="riscv_instr_seq_env"&gt;&lt;code class="xref py py-func docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv_instr_seq_env()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; function is given below:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-default notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;riscv_instr_seq_env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instr_seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg_file_mem&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}):&lt;/span&gt;

    &lt;span class="n"&gt;instruction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;drv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TInstructionI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;instr_seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;reg_rd_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Intf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Uint&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xlen&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;reg_file_rd_req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg_file_wr_req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;riscv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg_rd_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;reg_rd_data&lt;/span&gt; &lt;span class="o"&gt;|=&lt;/span&gt; \
        &lt;span class="n"&gt;register_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg_file_rd_req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg_file_wr_req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reg_file_mem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reg_file_mem&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="2" hidden="true"&gt;Here you can see the signature of the function and description of its parameters:&lt;/p&gt;
&lt;dl class="function" data-verbosity="2" hidden="true"&gt;
&lt;dt data-verbosity="2" hidden="true" id="riscv_instr_seq_env"&gt;
&lt;code class="sig-name descname" data-verbosity="2" hidden="true"&gt;riscv_instr_seq_env&lt;/code&gt;&lt;span class="sig-paren"&gt;(&lt;/span&gt;&lt;em class="sig-param"&gt;instr_seq&lt;/em&gt;, &lt;em class="sig-param"&gt;xlen=32&lt;/em&gt;, &lt;em class="sig-param"&gt;reg_file_mem={}&lt;/em&gt;&lt;span class="sig-paren"&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd data-verbosity="2" hidden="true"&gt;&lt;p data-verbosity="2" hidden="true"&gt;Drives riscv with an instruction sequence.&lt;/p&gt;
&lt;dl class="field-list simple" data-verbosity="2" hidden="true"&gt;
&lt;dt class="field-odd" data-verbosity="2" hidden="true"&gt;Parameters&lt;span class="colon"&gt;:&lt;/span&gt;&lt;/dt&gt;
&lt;dd class="field-odd" data-verbosity="2" hidden="true"&gt;&lt;ul class="simple" data-verbosity="2" hidden="true"&gt;
&lt;li data-verbosity="2" hidden="true"&gt;&lt;p data-verbosity="2" hidden="true"&gt;&lt;strong data-verbosity="2" hidden="true"&gt;instr_seq&lt;/strong&gt; – &lt;span data-verbosity="2" hidden="true"&gt;Sequence of instructions to send to riscv, encoded as &lt;a class="reference internal" data-verbosity="2" hidden="true" href="../../riscv/my_first_instruction.html#TInstructionI" title="TInstructionI"&gt;&lt;code class="xref py py-data docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;TInstructionI&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li data-verbosity="2" hidden="true"&gt;&lt;p data-verbosity="2" hidden="true"&gt;&lt;strong data-verbosity="2" hidden="true"&gt;xlen&lt;/strong&gt; – &lt;span data-verbosity="2" hidden="true"&gt;Width of the riscv registers in bits&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li data-verbosity="2" hidden="true"&gt;&lt;p data-verbosity="2" hidden="true"&gt;&lt;strong data-verbosity="2" hidden="true"&gt;reg_file_mem&lt;/strong&gt; – &lt;span data-verbosity="2" hidden="true"&gt;Initial register file dictionary that maps register IDs to their initial values&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt class="field-even" data-verbosity="2" hidden="true"&gt;Returns&lt;span class="colon"&gt;:&lt;/span&gt;&lt;/dt&gt;
&lt;dd class="field-even" data-verbosity="2" hidden="true"&gt;&lt;p data-verbosity="2" hidden="true"&gt;&lt;span data-verbosity="2" hidden="true"&gt;reg_file_mem&lt;/span&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;&lt;/dl&gt;

&lt;p data-verbosity="2" hidden="true"&gt;The &lt;code class="xref py py-func docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;drv&lt;/span&gt;&lt;/code&gt; gear can be used to drive a sequence of values to an input interface of a gear. In this case it will drive the sequence of instructions, passed via &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;instr_seq&lt;/span&gt;&lt;/code&gt; argument: &lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;instruction&lt;/span&gt;&lt;/span&gt; &lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;drv&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;t&lt;/span&gt;&lt;/span&gt;&lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;TInstructionI&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;,&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;seq&lt;/span&gt;&lt;/span&gt;&lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;instr_seq&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;. As you can see, the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;t&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;seq&lt;/span&gt;&lt;/code&gt; arguments to the &lt;code class="xref py py-func docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;drv&lt;/span&gt;&lt;/code&gt; gear need to be specified using keywords. The reason is that PyGears needs to distinguish between gear input interfaces and gear parameters, so only input interfaces are allowed to be passed as positional arguments (without argument names).&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Next, I hook up the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;register_file&lt;/span&gt;&lt;/code&gt; gears in the manner shown on the block diagram. You can see from the diagram that these two gears form a kind of a loop, so their connection cannot be expressed in a forward only manner. In these cases, we need to first break the loop somewhere, then connect the gears in a forward manner, and finally reconnect the loop at the point where it was broken. I decided to brake the loop at the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_rd_data&lt;/span&gt;&lt;/code&gt; interface (as shown on the block diagram), so I explicitly instantiated the interface object with the desired type for the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_rd_data&lt;/span&gt;&lt;/code&gt; interface: &lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_rd_data&lt;/span&gt;&lt;/span&gt; &lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;Intf&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;Uint&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;xlen&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;. This way we can feed it to the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv&lt;/span&gt;&lt;/code&gt; gear, together with the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;instruction&lt;/span&gt;&lt;/code&gt; interface, and the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv&lt;/span&gt;&lt;/code&gt; gear will have all the information needed to resolve itself and produce the output interfaces: &lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_file_rd_req&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;,&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_file_wr_req&lt;/span&gt;&lt;/span&gt; &lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;instruction&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;,&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_rd_data&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Finally, I connect &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv&lt;/span&gt;&lt;/code&gt; read and write request interfaces to the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;register_file&lt;/span&gt;&lt;/code&gt; gear, which gets instantiated and returns its output interface. Instead of it being fed to another gear or assigned to a variable, I use the pipe assign operator &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;|=&lt;/span&gt;&lt;/code&gt; to instruct PyGears that this output interface is in fact the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_rd_data&lt;/span&gt;&lt;/code&gt; interface I defined before. This closes the loop and everything is connected as shown on the block diagram.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="spike-interface"&gt;
&lt;h2&gt;Spike interface&lt;/h2&gt;
&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt; In my previous blog post &lt;/span&gt;&lt;span class="xref std std-doc" data-verbosity="2" hidden="true"&gt;pygears:setup&lt;/span&gt;&lt;span data-verbosity="2" hidden="true"&gt;, I showed how to implement a rudimentary interface for the &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://github.com/riscv/riscv-isa-sim/"&gt;Spike&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt; simulator that I plan to use as a reference ISA design. Now, I’ll show how to put it to action for verifying the &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;addi&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; instruction implementation. &lt;/span&gt;&lt;span&gt; I relocated the Spike interface class to &lt;/span&gt;&lt;a class="reference external" href="https://github.com/bogdanvuk/pygears_riscv/blob/a7d98ec/pygears_riscv/verif/spike.py"&gt;pygears_riscv/verif/spike.py&lt;/a&gt;&lt;span&gt; and had to make one major change to accomodate for the RISC-V &lt;/span&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Application_binary_interface"&gt;ABI (Application Binary Interface)&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-verbosity="3" hidden="true"&gt; First, I was surprised to find that issuing the read register command didn’t return any value in Spike simulator if the registers were named with prefix “x” (&lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;x*&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="3" hidden="true"&gt;). I started digging and found out that even though all registers &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;x1&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="3" hidden="true"&gt; - &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;x31&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="3" hidden="true"&gt; were created equal in the ISA specification, in order to cooperate better with C compilers additional rules were created, namely the ABI. &lt;/span&gt;&lt;span data-verbosity="2" hidden="true"&gt; &lt;/span&gt;&lt;a class="reference external" data-verbosity="2" hidden="true" href="https://content.riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf#page=121"&gt;Chapter 20: RISC-V Assembly Programmer’s Handbook&lt;/a&gt;&lt;span data-verbosity="2" hidden="true"&gt; provides the table that maps the native &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;x*&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; register names to their ABI equivalents, and specifies special purpose for each of the registers. It turns out that the Spike simulator understands only the ABI register names. &lt;/span&gt;&lt;span data-verbosity="3" hidden="true"&gt; Some additional information on the ABI, together with the examples of the assembly instruction syntax, is also given on &lt;/span&gt;&lt;a class="reference external" data-verbosity="3" hidden="true" href="https://github.com/riscv/riscv-elf-psabi-doc/blob/master/riscv-elf.md"&gt;riscv/riscv-elf-psabi-doc github&lt;/a&gt;&lt;span data-verbosity="3" hidden="true"&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I created a wrapper class around my Spike interface inside &lt;a class="reference external" href="https://github.com/bogdanvuk/pygears_riscv/blob/a7d98ec/pygears_riscv/verif/spike_instr_test.py"&gt;pygears_riscv/verif/spike_instr_test.py&lt;/a&gt;, which automates all the tasks I did manually in the &lt;span class="xref std std-doc"&gt;previous blog post&lt;/span&gt;, namely: writting the assembly file, running the gcc, and calling Spike interface with the correct parameters. I also added the possibility to easily initialize the register values which will come in handy for thourough verification.&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;The entry point to this Spike interface is the function &lt;a class="reference internal" data-verbosity="2" hidden="true" href="../../riscv/my_first_instruction.html#run_all" title="run_all"&gt;&lt;code class="xref py py-func docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;run_all()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, whose signature is explained below.&lt;/p&gt;
&lt;dl class="function" data-verbosity="2" hidden="true"&gt;
&lt;dt data-verbosity="2" hidden="true" id="run_all"&gt;
&lt;code class="sig-name descname" data-verbosity="2" hidden="true"&gt;run_all&lt;/code&gt;&lt;span class="sig-paren"&gt;(&lt;/span&gt;&lt;em class="sig-param"&gt;instructions&lt;/em&gt;, &lt;em class="sig-param"&gt;outdir='.'&lt;/em&gt;, &lt;em class="sig-param"&gt;reg_file_init=None&lt;/em&gt;&lt;span class="sig-paren"&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd data-verbosity="2" hidden="true"&gt;&lt;p data-verbosity="2" hidden="true"&gt;Runs a set of instructions on Spike simulator and returns the resulting state of the register file&lt;/p&gt;
&lt;dl class="field-list simple" data-verbosity="2" hidden="true"&gt;
&lt;dt class="field-odd" data-verbosity="2" hidden="true"&gt;Parameters&lt;span class="colon"&gt;:&lt;/span&gt;&lt;/dt&gt;
&lt;dd class="field-odd" data-verbosity="2" hidden="true"&gt;&lt;ul class="simple" data-verbosity="2" hidden="true"&gt;
&lt;li data-verbosity="2" hidden="true"&gt;&lt;p data-verbosity="2" hidden="true"&gt;&lt;strong data-verbosity="2" hidden="true"&gt;instructions&lt;/strong&gt; – &lt;span data-verbosity="2" hidden="true"&gt;Sequence of instructions to execute in Spike, encoded as &lt;a class="reference internal" data-verbosity="2" hidden="true" href="../../riscv/my_first_instruction.html#TInstructionI" title="TInstructionI"&gt;&lt;code class="xref py py-data docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;TInstructionI&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li data-verbosity="2" hidden="true"&gt;&lt;p data-verbosity="2" hidden="true"&gt;&lt;strong data-verbosity="2" hidden="true"&gt;outdir&lt;/strong&gt; – &lt;span data-verbosity="2" hidden="true"&gt;Directory in which to store the intermediate files&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li data-verbosity="2" hidden="true"&gt;&lt;p data-verbosity="2" hidden="true"&gt;&lt;strong data-verbosity="2" hidden="true"&gt;reg_file_init&lt;/strong&gt; – &lt;span data-verbosity="2" hidden="true"&gt;Initial register file dictionary that maps register IDs to their initial values&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt class="field-even" data-verbosity="2" hidden="true"&gt;Returns&lt;span class="colon"&gt;:&lt;/span&gt;&lt;/dt&gt;
&lt;dd class="field-even" data-verbosity="2" hidden="true"&gt;&lt;p data-verbosity="2" hidden="true"&gt;&lt;span data-verbosity="2" hidden="true"&gt;The initial and the resulting state of the register file&lt;/span&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;&lt;/dl&gt;

&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt;Based on the arguments passed for &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;instructions&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; and &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_file_init&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; parameters, an assembly file will be generated, which will then be compiled using gcc and finally simulated using Spike. After that, the resulting state of the register file will be read out, so that it can be compared with the results of the processor design simulation. &lt;/span&gt;&lt;span data-verbosity="3" hidden="true"&gt; Assembly file is generated using a following &lt;/span&gt;&lt;a class="reference external" data-verbosity="3" hidden="true" href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt;&lt;span data-verbosity="3" hidden="true"&gt; template:&lt;/span&gt;&lt;/p&gt;
&lt;div hidden data-verbosity=3&gt;
&lt;div class="highlight-jinja notranslate" data-verbosity="3" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;;; # Assembly program template.&lt;/span&gt;

&lt;span class="x"&gt;.text&lt;/span&gt;
&lt;span class="x"&gt;  .global _start&lt;/span&gt;

&lt;span class="x"&gt;_start:&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;reg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;reg_file_init.items&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;.equ X&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;reg&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;_INIT_VALUE, &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;  ;; # Optional preloading of initial register values.&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;reg&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;reg_file_init&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;  lui x&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;reg&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;,      %hi(X&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;reg&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;_INIT_VALUE)&lt;/span&gt;
&lt;span class="x"&gt;  addi x&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;reg&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;, x&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;reg&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;, %lo(X&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;reg&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;_INIT_VALUE)&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;  ;; # The actual instructions I&amp;#39;d like to test.&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;instruction&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;instructions&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;disassemble&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;instruction&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;  ;; # Write the value 1 to tohost, telling Spike to quit with 0 exit code.&lt;/span&gt;
&lt;span class="x"&gt;  li t0, 1&lt;/span&gt;
&lt;span class="x"&gt;  la t1, tohost&lt;/span&gt;
&lt;span class="x"&gt;  sw t0, 0(t1)&lt;/span&gt;

&lt;span class="x"&gt;  ;; # Spin until Spike terminates the simulation.&lt;/span&gt;
&lt;span class="x"&gt;  1: j 1b&lt;/span&gt;

&lt;span class="x"&gt;;; # Expose tohost and fromhost to Spike so we can communicate with it.&lt;/span&gt;
&lt;span class="x"&gt;.data&lt;/span&gt;
&lt;span class="x"&gt;  .global tohost&lt;/span&gt;
&lt;span class="x"&gt;tohost:   .dword 0&lt;/span&gt;
&lt;span class="x"&gt;  .global fromhost&lt;/span&gt;
&lt;span class="x"&gt;fromhost: .dword 0&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="3" hidden="true"&gt;Besides the boilerplate code explained in &lt;span class="xref std std-doc" data-verbosity="3" hidden="true"&gt;pygears:setup&lt;/span&gt;, there are three &lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;for&lt;/span&gt;&lt;/code&gt; loops in the template that generate the code that:&lt;/p&gt;
&lt;ol class="arabic simple" data-verbosity="3" hidden="true"&gt;
&lt;li data-verbosity="3" hidden="true"&gt;&lt;p data-verbosity="3" hidden="true"&gt;Defines a constant for each register initial value supplied via the &lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;reg_file_init&lt;/span&gt;&lt;/code&gt; argument.&lt;/p&gt;&lt;/li&gt;
&lt;li data-verbosity="3" hidden="true"&gt;&lt;p data-verbosity="3" hidden="true"&gt;Loads the constants to the registers. It requires two commands to load a 32 bit value to the register, since RISC-V instructions have fixed size of 32 bits, so they cannot contain a 32 bit immediate value besides the &lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;opcode&lt;/span&gt;&lt;/code&gt; field.&lt;/p&gt;&lt;/li&gt;
&lt;li data-verbosity="3" hidden="true"&gt;&lt;p data-verbosity="3" hidden="true"&gt;Executes the instructions passed via the &lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;instructions&lt;/span&gt;&lt;/code&gt; argument. The &lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;dissasemble&lt;/span&gt;&lt;/code&gt; function generates the assembly language statements from their &lt;a class="reference internal" data-verbosity="3" hidden="true" href="../../riscv/my_first_instruction.html#TInstructionI" title="TInstructionI"&gt;&lt;code class="xref py py-data docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;TInstructionI&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; encodings.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p data-verbosity="3" hidden="true"&gt;The first idea was to use the &lt;a class="reference external" data-verbosity="3" hidden="true" href="https://github.com/riscv/riscv-asm-manual/blob/master/riscv-asm.md#load-immediate"&gt;li&lt;/a&gt; pseudo instruction, but I just couldn’t get it to work, and the following error kept popping up:&lt;/p&gt;
&lt;div hidden data-verbosity=3&gt;
&lt;div class="highlight-default notranslate" data-verbosity="3" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;terminate&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="n"&gt;throwing&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;std::runtime_error&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  &lt;span class="n"&gt;misaligned&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="3" hidden="true"&gt;So, I went with the approach described in the &lt;a class="reference external" data-verbosity="3" hidden="true" href="https://github.com/riscv/riscv-asm-manual/blob/master/riscv-asm.md#absolute-addressing"&gt;Absolute Addressing&lt;/a&gt; section of the RISC-V assembly guide.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="writing-the-first-test"&gt;
&lt;h2&gt;Writing the first test&lt;/h2&gt;
&lt;p&gt;For the start, I’ll create one simple test as a proof of concept. To make it a bit more serious I’ll use negative numbers as arguments to see whether sign extension works properly too.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_addi&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;test_instr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ADDI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1233&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rs1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;reg_file_init&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;spike_reg_file_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spike_reg_file_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spike_instr_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;test_instr&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;build&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg_file_init&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reg_file_init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;reg_file_mem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;riscv_instr_seq_env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;instr_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;test_instr&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;xlen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;reg_file_mem&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spike_reg_file_start&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Resulting value of the register x1: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;reg_file_mem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;reg_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg_value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reg_file_mem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;spike_reg_file_end&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;reg_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;reg_value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-verbosity="2" hidden="true"&gt;In order to create the test instruction, I’ll use the &lt;a class="reference internal" data-verbosity="2" hidden="true" href="../../riscv/my_first_instruction.html#ADDI" title="ADDI"&gt;&lt;code class="xref py py-data docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;ADDI&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; template and substitute the values of the fields that I’d like to change: &lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;test_instr&lt;/span&gt;&lt;/span&gt; &lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;ADDI&lt;/span&gt;&lt;/span&gt;&lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;replace&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;imm&lt;/span&gt;&lt;/span&gt;&lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;=-&lt;/span&gt;&lt;/span&gt;&lt;span class="mi" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;1233&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;,&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;rd&lt;/span&gt;&lt;/span&gt;&lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class="mi" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;,&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;rs1&lt;/span&gt;&lt;/span&gt;&lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class="mi" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;. The &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;test_instr&lt;/span&gt;&lt;/code&gt; basically tells the processor to add a value of &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;-1233&lt;/span&gt;&lt;/code&gt; to the current value of the register &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;x1&lt;/span&gt;&lt;/code&gt; (&lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;rs&lt;/span&gt;&lt;/span&gt;&lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class="mi" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;) and store it back into the register &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;x1&lt;/span&gt;&lt;/code&gt; (&lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;rd&lt;/span&gt;&lt;/span&gt;&lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class="mi" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;). I’ll initialize the register &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;x1&lt;/span&gt;&lt;/code&gt; with the value of &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;-1&lt;/span&gt;&lt;/code&gt;, so that both addition operands are negative: &lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;reg_file_init&lt;/span&gt;&lt;/span&gt; &lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span class="mi" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;:&lt;/span&gt;&lt;/span&gt; &lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span class="mi" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;First, the Spike simulator is called via &lt;a class="reference internal" data-verbosity="2" hidden="true" href="../../riscv/my_first_instruction.html#run_all" title="run_all"&gt;&lt;code class="xref py py-func docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;run_all()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; function to run the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;test_instr&lt;/span&gt;&lt;/code&gt;, and return the referent initial and resulting states of the register file, as described in the section &lt;a class="reference internal" data-verbosity="2" hidden="true" href="#spike-interface"&gt;Spike interface&lt;/a&gt;.&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Next, the &lt;a class="reference internal" data-verbosity="2" hidden="true" href="../../riscv/my_first_instruction.html#riscv_instr_seq_env" title="riscv_instr_seq_env"&gt;&lt;code class="xref py py-func docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv_instr_seq_env()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; function is called to create the verification environment, as described in the section &lt;a class="reference internal" data-verbosity="2" hidden="true" href="#verification-environment"&gt;Verification environment&lt;/a&gt;. The initial register file state obtained from Spike in the form of a &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;list&lt;/span&gt;&lt;/code&gt;, is transformed to a &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;dict&lt;/span&gt;&lt;/code&gt; and provided to the &lt;a class="reference internal" data-verbosity="2" hidden="true" href="../../riscv/my_first_instruction.html#riscv_instr_seq_env" title="riscv_instr_seq_env"&gt;&lt;code class="xref py py-func docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv_instr_seq_env()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; verbatim. After this statement, all the gears are instantiated and registered with PyGears framework, so when the simulator is invoked via &lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;sim&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;, it has all the information it needs to simulate the design. This command invokes the PyGears built-in pure-Python simulator, of which I’ll talk some more in the following blog posts.&lt;/p&gt;
&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt;After the simulation is done, I print the resulting value of the register &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;x1&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt;, by casting its value to the &lt;/span&gt;&lt;code class="xref any docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;Int[32]&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; type in order to print its signed representation. &lt;/span&gt;&lt;span data-verbosity="3" hidden="true"&gt; This is of course an ptional step and is useful to me only now at the beginning for the purpose of debugging the verification environment. I’ll remove it later when I gain trust in my tests.&lt;/span&gt;&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Finally, I check whether the resulting register file state of my design matches the state Spike reported. If the register value mismatch is found, the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;assert&lt;/span&gt;&lt;/code&gt; exception will be raised and the test will fail.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="running-the-test"&gt;
&lt;h2&gt;Running the test&lt;/h2&gt;
&lt;p&gt;For running the tests for the PyGears framework, I’ve been using &lt;a class="reference external" href="https://pytest.org"&gt;pytest&lt;/a&gt;, so I’ll use it here too. &lt;span data-verbosity="2" hidden="true"&gt; I use a test runner since it allows me to run all my tests with a single command. It automatically searches the files in order to discover the test functions, and generates a nice report telling me how many tests passed and which of them failed. &lt;/span&gt;&lt;span data-verbosity="3" hidden="true"&gt; There are also options for running only a specific group of tests, run all tests from a single file or run a single test.&lt;/span&gt;&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;Before running the tests with pytest, you’ll need to install it with pip:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-bash notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3 install pytest
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p&gt;In order to invoke the test with pytest, you can navigate to the &lt;a class="reference external" href="https://github.com/bogdanvuk/pygears_riscv/blob/a7d98ec/tests/test_instructions"&gt;tests/test_instructions&lt;/a&gt; folder in your terminal and run the test by invoking:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pytest &lt;span class="s2"&gt;&amp;quot;test_addi.py::test_addi&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The pytest runner should automatically find the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;test_addi()&lt;/span&gt;&lt;/code&gt; test function, run it and print the report:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;==========================================&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="n"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;==========================================&lt;/span&gt;
&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;rootdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pygears_riscv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inifile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;
&lt;span class="n"&gt;collected&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;

&lt;span class="n"&gt;test_addi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;                                                                                    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;=======================================&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;3.57&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;========================================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Et voila! My RISC-V design is completely aligned with the Spike simulator! &lt;/span&gt;&lt;span data-verbosity="2" hidden="true"&gt; By default, pytest hides all console output from the tests in order to provide a cleaner report. If I want to see the output, I need to invoke pytest with the &lt;/span&gt;&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;-s&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity="2" hidden="true"&gt; option:&lt;/span&gt;&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-bash notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pytest -s &lt;span class="s2"&gt;&amp;quot;test_addi.py::test_addi&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="2" hidden="true"&gt;Which prints the following:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-python notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;==========================================&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="n"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;==========================================&lt;/span&gt;
&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;rootdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pygears_riscv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inifile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;
&lt;span class="n"&gt;collected&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;

&lt;span class="n"&gt;test_addi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6084884924426910478&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;--------------&lt;/span&gt; &lt;span class="n"&gt;Simulation&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;--------------&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;register_file&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;register_file_write&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Writing&lt;/span&gt; &lt;span class="n"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4294966062&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;-----------&lt;/span&gt; &lt;span class="n"&gt;Simulation&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;---------------&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Elapsed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.00&lt;/span&gt;
&lt;span class="n"&gt;Resulting&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;=======================================&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;3.58&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;========================================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="3" hidden="true"&gt; I profiled the test a bit and found out that the majority of the test run time is spent in retrieving the register file state from Spike, so I’ll need to optimize it soon if I want to have an elaborate regression suit that runs in a reasonable amount of time.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="simulating-with-verilator"&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;h2 data-verbosity="2" hidden="true"&gt; Simulating with Verilator&lt;/h2&gt;

&lt;/div&gt;&lt;p data-verbosity="2" hidden="true"&gt;One last section and I promise to let you go. I’ve written one more test in order to check whether the generated RTL code for the processor produces the correct results as well. I’ve placed the test in &lt;a class="reference external" data-verbosity="2" hidden="true" href="https://github.com/bogdanvuk/pygears_riscv/blob/a7d98ec/tests/test_instructions/test_addi.py"&gt;tests/test_instructions/test_addi.py&lt;/a&gt;, inside &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;test_addi_verilator()&lt;/span&gt;&lt;/code&gt; function. The test is identical to the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;test_addi()&lt;/span&gt;&lt;/code&gt; described in the section &lt;a class="reference internal" data-verbosity="2" hidden="true" href="#writing-the-first-test"&gt;Writing the first test&lt;/a&gt;, excepts that it set a &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;sim_cls&lt;/span&gt;&lt;/code&gt; parameter for the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv&lt;/span&gt;&lt;/code&gt; gear to &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;SimVerilated&lt;/span&gt;&lt;/code&gt;: &lt;code class="code highlight py docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;find&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class="s1" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;‘/riscv’&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;params&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class="s1" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;‘sim_cls’&lt;/span&gt;&lt;/span&gt;&lt;span class="p" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;]&lt;/span&gt;&lt;/span&gt; &lt;span class="o" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;=&lt;/span&gt;&lt;/span&gt; &lt;span class="n" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;SimVerilated&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;. This instructs the PyGears simulator to use Verilator interface for &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;riscv&lt;/span&gt;&lt;/code&gt; gear, which generates the RTL code, invokes Verilator to simulate it and makes it play well with the PyGears simulator. The last bit is important since the rest of the gears (&lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;drv&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;register_file&lt;/span&gt;&lt;/code&gt;) will still be simulated in pure Python.&lt;/p&gt;
&lt;p data-verbosity="2" hidden="true"&gt;If I navigate to the &lt;a class="reference external" data-verbosity="2" hidden="true" href="https://github.com/bogdanvuk/pygears_riscv/blob/a7d98ec/tests/test_instructions"&gt;tests/test_instructions&lt;/a&gt; directory, I can run only the &lt;code class="docutils literal notranslate" data-verbosity="2" hidden="true"&gt;&lt;span class="pre"&gt;test_addi_verilator()&lt;/span&gt;&lt;/code&gt; test with the following command:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-bash notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pytest -s &lt;span class="s2"&gt;&amp;quot;test_addi.py::test_addi_verilator&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="3" hidden="true"&gt;If there is some issue with running the Verilator, an error report will be printed, telling me which log file to check for the Verilator errors:&lt;/p&gt;
&lt;div hidden data-verbosity=3&gt;
&lt;div class="highlight-python notranslate" data-verbosity="3" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;=========================================&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="n"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;==========================================&lt;/span&gt;
&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;rootdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pygears_riscv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inifile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;
&lt;span class="n"&gt;collected&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;

&lt;span class="n"&gt;test_addi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4987822489491942249&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;               &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;riscv&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Verilating&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;F&lt;/span&gt;

&lt;span class="o"&gt;===================================&lt;/span&gt; &lt;span class="n"&gt;FAILURES&lt;/span&gt; &lt;span class="o"&gt;===================================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;div hidden data-verbosity=3&gt;
&lt;div class="highlight-python notranslate" data-verbosity="3" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;           &lt;span class="n"&gt;pygears&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verilator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerilatorCompileError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Verilator&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;32512.&lt;/span&gt; &lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/tools/home/pygears_riscv/tests/test_instructions/build/riscv/verilate.log&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;../../../&lt;/span&gt;&lt;span class="n"&gt;pygears&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pygears&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;verilator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;VerilatorCompileError&lt;/span&gt;
&lt;span class="o"&gt;------------------------------&lt;/span&gt; &lt;span class="n"&gt;Captured&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="o"&gt;-------------------------------&lt;/span&gt;
&lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;                     &lt;span class="mi"&gt;373&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt;     &lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4755614176382389150&lt;/span&gt;
&lt;span class="n"&gt;verilator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;                &lt;span class="mi"&gt;46&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt;     &lt;span class="n"&gt;Verilating&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;===========================&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;3.89&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;===========================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="3" hidden="true"&gt;In my case, I forgot to &lt;span class="xref std std-ref" data-verbosity="3" hidden="true"&gt;install Verilator&lt;/span&gt; and add it to the path, so my &lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;verilate.log&lt;/span&gt;&lt;/code&gt; showed that I had no &lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;verilator&lt;/span&gt;&lt;/code&gt; executable on the path, which I needed to amend:&lt;/p&gt;
&lt;div hidden data-verbosity=3&gt;
&lt;div class="highlight-bash notranslate" data-verbosity="3" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh: &lt;span class="m"&gt;1&lt;/span&gt;: verilator: not found
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p&gt;&lt;span data-verbosity="2" hidden="true"&gt;The test gave me an almost identical report to the pure-Python simulation. &lt;/span&gt;&lt;span data-verbosity="3" hidden="true"&gt; The only difference is that the simulation took longer to finish. The reason is that PyGears simulator doesn’t have a nice insight anymore into when the gears simulated in RTL are finished (think large design with a deep pipeline). The design can continue operating long after the last input has been received. PyGears works around this issue by letting the user specify the inactivity timeout after which the gear is terminated.&lt;/span&gt;&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class="highlight-python notranslate" data-verbosity="2" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;=========================================&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="n"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;==========================================&lt;/span&gt;
&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;rootdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pygears_riscv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inifile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;
&lt;span class="n"&gt;collected&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;

&lt;span class="n"&gt;test_addi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4987822489491942249&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;               &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;riscv&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Verilating&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;               &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;riscv&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Done&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;--------------&lt;/span&gt; &lt;span class="n"&gt;Simulation&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;--------------&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;register_file&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;register_file_write&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Writing&lt;/span&gt; &lt;span class="n"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4294966062&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;
&lt;span class="mi"&gt;51&lt;/span&gt;                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;-----------&lt;/span&gt; &lt;span class="n"&gt;Simulation&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;---------------&lt;/span&gt;
&lt;span class="mi"&gt;51&lt;/span&gt;                      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Elapsed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;
&lt;span class="n"&gt;Resulting&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity="3" hidden="true"&gt;Generated SystemVerilog can be found in the &lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;/tmp&lt;/span&gt;&lt;/code&gt; folder, since no output directory was specified to the &lt;code class="docutils literal notranslate" data-verbosity="3" hidden="true"&gt;&lt;span class="pre"&gt;sim()&lt;/span&gt;&lt;/code&gt; function. Later, when I tidy up the tests, I’ll make it output to some reasonable destination.&lt;/p&gt;
&lt;div hidden data-verbosity=3&gt;
&lt;div class="highlight-sv notranslate" data-verbosity="3" hidden="true"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="n"&gt;riscv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;input&lt;/span&gt; &lt;span class="kt"&gt;logic&lt;/span&gt; &lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;input&lt;/span&gt; &lt;span class="kt"&gt;logic&lt;/span&gt; &lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;dti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="n"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// (u7, u5, u3, u5, i12) (32)&lt;/span&gt;
    &lt;span class="n"&gt;dti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="n"&gt;reg_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// u32 (32)&lt;/span&gt;
    &lt;span class="n"&gt;dti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;producer&lt;/span&gt; &lt;span class="n"&gt;reg_file_rd_req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// u5 (5)&lt;/span&gt;
    &lt;span class="n"&gt;dti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;producer&lt;/span&gt; &lt;span class="n"&gt;reg_file_wr_req&lt;/span&gt; &lt;span class="c1"&gt;// (u5, u32) (37)&lt;/span&gt;

&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="n"&gt;dti&lt;/span&gt; &lt;span class="p"&gt;#(.&lt;/span&gt;&lt;span class="n"&gt;W_DATA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;instruction_imm_s&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// i12 (12)&lt;/span&gt;

      &lt;span class="n"&gt;dti&lt;/span&gt; &lt;span class="p"&gt;#(.&lt;/span&gt;&lt;span class="n"&gt;W_DATA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;add_s&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// i33 (33)&lt;/span&gt;

      &lt;span class="n"&gt;dti&lt;/span&gt; &lt;span class="p"&gt;#(.&lt;/span&gt;&lt;span class="n"&gt;W_DATA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;add_res_s&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// u32 (32)&lt;/span&gt;

      &lt;span class="n"&gt;dti&lt;/span&gt; &lt;span class="p"&gt;#(.&lt;/span&gt;&lt;span class="n"&gt;W_DATA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;instruction_rd_s&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// u5 (5)&lt;/span&gt;

      &lt;span class="n"&gt;dti&lt;/span&gt; &lt;span class="p"&gt;#(.&lt;/span&gt;&lt;span class="n"&gt;W_DATA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;instruction_bc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]();&lt;/span&gt; &lt;span class="c1"&gt;// (u7, u5, u3, u5, i12) (32)&lt;/span&gt;
    &lt;span class="n"&gt;bc&lt;/span&gt; &lt;span class="p"&gt;#(&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&amp;#39;d3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bc_instruction&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;din&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instruction_bc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="n"&gt;riscv_instruction_rs1&lt;/span&gt; &lt;span class="n"&gt;instruction_rs1_i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;din&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instruction_bc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg_file_rd_req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="n"&gt;riscv_instruction_imm&lt;/span&gt; &lt;span class="n"&gt;instruction_imm_i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;din&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instruction_bc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instruction_imm_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;#(&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DIN0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&amp;#39;d32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DIN0_SIGNED&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&amp;#39;d1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DIN1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&amp;#39;d12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DIN1_SIGNED&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&amp;#39;d1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;add_i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;din0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg_data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;din1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instruction_imm_s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="n"&gt;riscv_cast_dout&lt;/span&gt; &lt;span class="n"&gt;cast_dout_i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;din&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_res_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="n"&gt;riscv_instruction_rd&lt;/span&gt; &lt;span class="n"&gt;instruction_rd_i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;din&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instruction_bc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instruction_rd_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="n"&gt;riscv_ccat&lt;/span&gt; &lt;span class="n"&gt;ccat_i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clk&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;din0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instruction_rd_s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;din1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_res_s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reg_file_wr_req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;



&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hey, I have my single-instruction RISC-V processor implemented in PyGears and verified with a simple test. It may seem that much needed to happen in order for the processor to support this one instruction. But most of the effort went into building the verification environment that I think is now really powerfull and I don’t think much additional effort needs to be poured into it, besides adding the data and instruction memory modules. In fact, with only 5 lines of code, the RISC-V implementation decodes the instruction, performs the ALU operation and interfaces the register file, not bad for a 5-liner.&lt;/p&gt;
&lt;p&gt;This post turned out longer than I expected, so I left some important topics for later blog posts like: refactoring of the tests, simulation with Cadence or Questa simulators, maximum frequency and core footprint assesment, constrained-random simulation, etc. So stay tuned!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://docs.pygears.org/riscv/my_first_instruction.html" rel="alternate"/>
    <summary> First instruction is probably going to be unlike any other in the amount of work that I’ll need to put into implementing it, so it deserves a post on its own.  Let’s start from the RV32I description in the (currently) latest version of the RISC-V ISA Specification, which is given in the Chapter 2: RV32I Base Integer Instruction Set. The specification first goes on to describe Integer Computational Instructions (Chapter 2.4), of which the addi instruction is explained first, so let’s start with that one.</summary>
    <published>2018-10-30T00:00:00+01:00</published>
  </entry>
</feed>
