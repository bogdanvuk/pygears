{% macro slave_read_no_araddr(name, rdata, araddr) -%}
  {% set araddr_w = araddr.params['araddr'] %}
  {% set rdata_w = rdata.params['rdata'] %}

  axi_slave_read #(
                    .C_AXI_ID_WIDTH(C_AXI_{{name.upper()}}_ID_WIDTH),
                    .C_AXI_ADDR_WIDTH({{araddr.params['araddr']}}),
                    .C_AXI_DATA_WIDTH({{rdata.params['rdata']}})
  )
  {{name}}_axi_slave_read (
                    .S_AXI_ACLK(aclk),
                    .S_AXI_ARESETN(aresetn_axi),
                    .M_AXI_ARREADY(1'b1),
                    .M_AXI_RDATA({{rdata.name}}.data),
                    .M_AXI_RVALID({{rdata.name}}.valid),
                    .M_AXI_RREADY({{rdata.name}}.ready),
                    .M_AXI_RRESP(2'b0),
{{axi_intfs.port_map(axi_intfs.AXI_SLAVE, name, "s_axi", uppercase=True,
    araddr=araddr.params,
    rdata=rdata.params)|join(",\n")|indent(19, True)}}
                    );

{%- endmacro %}


{% macro slave_read(name, rdata, araddr) -%}
  {% set araddr_w = araddr.params['araddr'] %}
  {% set rdata_w = rdata.params['rdata'] %}
  {% set rdata_byte_addr_w = bitw(ceil_div(rdata_w, 8) - 1) %}

  wire [{{araddr_w - 1}}:0] {{name}}_araddr_s;
  assign {{araddr.name}}.data = {{name}}_araddr_s[{{araddr_w - 1}}:{{rdata_byte_addr_w}}];

  axi_slave_read #(
                    .C_AXI_ID_WIDTH(C_AXI_{{name.upper()}}_ID_WIDTH),
                    .C_AXI_ADDR_WIDTH({{araddr.params['araddr']}}),
                    .C_AXI_DATA_WIDTH({{rdata.params['rdata']}})
  )
  {{name}}_axi_slave_read (
                    .S_AXI_ACLK(aclk),
                    .S_AXI_ARESETN(aresetn_axi),
                    .M_AXI_ARADDR({{name}}_araddr_s),
                    .M_AXI_ARVALID({{araddr.name}}.valid),
                    .M_AXI_ARREADY({{araddr.name}}.ready & {{araddr.name}}.valid),
                    .M_AXI_RDATA({{rdata.name}}.data),
                    .M_AXI_RVALID({{rdata.name}}.valid),
                    .M_AXI_RREADY({{rdata.name}}.ready),
                    .M_AXI_RRESP(2'b0),
{{axi_intfs.port_map(axi_intfs.AXI_SLAVE, name, "s_axi", uppercase=True,
    araddr=araddr.params,
    rdata=rdata.params)|join(",\n")|indent(19, True)}}
                    );
{%- endmacro %}

{% macro slave_write(module_name, name, wdata, awaddr) -%}

  {% set data_strb_w = wdata.params['wdata'] + wdata.params['wstrb'] %}
  {% set wdata_intf = 'strb_' + name %}

  dti #(.W_DATA({{data_strb_w}})) {{wdata_intf}}();

 {{module_name}}_{{name}}_strb_combiner {{module_name}}_{{name}}_strb_combiner_i (
                                .clk(aclk),
                                .rst(~aresetn_axi),
                                .din({{wdata_intf}}),
                                .dout({{wdata.name}})
                                );

  axi_slave_write #(
                    .C_AXI_ID_WIDTH(C_AXI_{{name.upper()}}_ID_WIDTH),
                    .C_AXI_ADDR_WIDTH({{awaddr.params['awaddr']}}),
                    .C_AXI_DATA_WIDTH({{wdata.params['wdata']}})
  )
  {{name}}_axi_slave_write (
                    .S_AXI_ACLK(aclk),
                    .S_AXI_ARESETN(aresetn_axi),

        {% if awaddr.port %}
                    .M_AXI_AWADDR({{awaddr.name}}.data),
                    .M_AXI_AWREADY({{awaddr.name}}.ready & {{awaddr.name}}.valid),
        {% else %}
                    .M_AXI_AWREADY(1'b1),
        {% endif %}
                    .M_AXI_WDATA({{wdata_intf}}.data[{{wdata.params['wdata']-1}}:0]),
                    .M_AXI_WSTRB({{wdata_intf}}.data[{{wdata.params['wdata']}}+:{{wdata.params['wstrb']}}]),
                    .M_AXI_WVALID({{wdata_intf}}.valid),
                    .M_AXI_WREADY({{wdata_intf}}.ready & {{wdata_intf}}.valid),

                    .M_AXI_BRESP(2'b0),
                    .M_AXI_BVALID({{wdata_intf}}.valid),
{{axi_intfs.port_map(axi_intfs.AXI_SLAVE, name, "s_axi", uppercase=True,
    awaddr=True,
    bresp=True,
    wdata=True)|join(",\n")|indent(19, True)}}
                    );


{%- endmacro %}

{% macro slave_write_combined(name, wdata, awaddr) -%}

  {% set wr_req_data = awaddr['name'] + '.data' %}
  {% set awaddr_w = awaddr.params['awaddr'] %}
  {% set wdata_w = wdata.params['wdata'] %}
  {% set wdata_byte_addr_w = bitw(ceil_div(wdata_w, 8) - 1) %}

  wire [{{awaddr_w - 1}}:0] {{name}}_awaddr_s;
  assign {{wr_req_data}}[{{awaddr_w-wdata_byte_addr_w-1}}:0] = {{name}}_awaddr_s[{{awaddr_w - 1}}:{{wdata_byte_addr_w}}];

  axi_slave_write #(
                    .C_AXI_ID_WIDTH(C_AXI_{{name.upper()}}_ID_WIDTH),
                    .C_AXI_ADDR_WIDTH({{awaddr_w}}),
                    .C_AXI_DATA_WIDTH({{wdata_w}})
  )
  {{name}}_axi_slave_write (
                    .S_AXI_ACLK(aclk),
                    .S_AXI_ARESETN(aresetn_axi),
                    .M_AXI_AWADDR({{name}}_awaddr_s),
                    .M_AXI_AWREADY({{awaddr['name']}}.ready & {{awaddr['name']}}.valid),
                    .M_AXI_WDATA({{wr_req_data}}[{{awaddr_w - wdata_byte_addr_w + wdata_w-1}}:{{awaddr_w-wdata_byte_addr_w}}]),
                    .M_AXI_WVALID({{wdata['name']}}.valid),
                    .M_AXI_WREADY({{wdata['name']}}.ready),
                    .M_AXI_BRESP(2'b0),
                    .M_AXI_BVALID({{wdata['name']}}.valid),
{{axi_intfs.port_map(axi_intfs.AXI_SLAVE, name, "s_axi", uppercase=True, awaddr=True,
    bresp=True,
    wdata=True)|join(",\n")|indent(19, True)}}
                    );

{%- endmacro %}

{% macro dma_read(name, rdata) -%}

  {%- set ctrl_port_map = axi_intfs.port_map(
      axi_intfs.AXIL_SLAVE, name + "_ctrl", "s_axil", uppercase=True,
      araddr=5, rdata=32, awaddr=5, wdata=32, bresp=True) %}

  {%- set axi_port_map = axi_intfs.port_map(
      axi_intfs.AXI_MASTER, name, "m_axi", uppercase=True,
      araddr=32, rdata=rdata.params['rdata']) %}


  aximm2s #(
  {% if 'rlast' in rdata.datamap %}
                    .OPT_TLAST(1),
  {% endif %}
                    .C_AXI_ID_WIDTH(C_AXI_{{name.upper()}}_ID_WIDTH),
                    .C_AXI_DATA_WIDTH({{rdata.params['rdata']}})
    )
  {{name}}_aximm2s (
                    .S_AXI_ACLK(aclk),
                    .S_AXI_ARESETN(aresetn_axi),
                    .S_AXIS_TDATA({{rdata.name}}.data[{{rdata.dataslice('rdata')}}]),
                    .S_AXIS_TVALID({{rdata.name}}.valid),
                    .S_AXIS_TREADY({{rdata.name}}.ready),
  {% if 'rlast' in rdata.datamap %}
                    .S_AXIS_TLAST({{rdata.name}}.data[{{rdata.dataslice('rlast')}}]),
  {% endif %}
                    {{axi_port_map|join(",\n")|indent(19, True)}},
                    {{ctrl_port_map|join(",\n")|indent(19, True)}}
                    );

{%- endmacro %}


{% macro dma_write(name, wdata) -%}

  {%- set ctrl_port_map = axi_intfs.port_map(
      axi_intfs.AXIL_SLAVE, name + "_ctrl", "s_axil", uppercase=True,
      araddr=5, rdata=32, awaddr=5, wdata=32, bresp=True) %}

  {%- set axi_port_map = axi_intfs.port_map(
      axi_intfs.AXI_MASTER, name, "m_axi", uppercase=True,
      awaddr=32, wdata=wdata.params['wdata'], bresp=True) %}

  axis2mm #(
  {% if wdata.datamap and 'wlast' in wdata.datamap %}
                    .OPT_TLAST_SYNC(1),
  {% else %}
                    .OPT_TLAST_SYNC(0),
  {% endif %}
                    .OPT_TREADY_WHILE_IDLE(0),
                    .C_AXI_ID_WIDTH(C_AXI_{{name.upper()}}_ID_WIDTH),
                    .C_AXI_DATA_WIDTH({{wdata.params['wdata']}})
    )
  {{name}}_aximm2s (
                    .S_AXI_ACLK(aclk),
                    .S_AXI_ARESETN(aresetn_axi),
                    .S_AXIS_TDATA({{wdata.name}}.data[{{wdata.dataslice('wdata')}}]),
                    .S_AXIS_TVALID({{wdata.name}}.valid),
                    .S_AXIS_TREADY({{wdata.name}}.ready),
  {% if wdata.datamap and 'wlast' in wdata.datamap %}
                    .S_AXIS_TLAST({{wdata.name}}.data[{{wdata.dataslice('wlast')}}]),
  {% endif %}
                    {{axi_port_map|join(",\n")|indent(19, True)}},
                    {{ctrl_port_map|join(",\n")|indent(19, True)}}
                    );

{%- endmacro %}


{% macro bram(name, awaddr, wdata, araddr, rdata) -%}
    {% set bram_din = wdata.name %}
    {% set bram_dout = rdata.name %}

    {% set wr_req_data = awaddr['name'] + '.data' %}
    {% set awaddr_w = awaddr.params['awaddr'] %}
    {% set wdata_w = wdata.params['wdata'] %}
    {% set wdata_byte_addr_w = bitw(ceil_div(wdata_w, 8) - 1) %}

    {%- set axi_port_map = axi_intfs.port_map(
      axi_intfs.AXI_SLAVE, name, "s_axi", uppercase=True,
      awaddr={'awid': None}, wdata=True, bresp={'bid': None},
      araddr={'arid': None}, rdata={'rid': None}) %}

    logic [15:0] bram_addr_a;
    logic [31:0] bram_rd_data;
    logic [31:0] bram_wr_data;
    logic bram_we_a;

    assign {{name}}_rid = {{name}}_arid;
    assign {{name}}_bid = {{name}}_awid;

    {# TODO: Fixme: BRAM controller pulls valid low after initial cycle. It expects return data exactly on next cycle #}
    {% if bram_dout %}
      assign bram_rd_data = {{rdata.name}}.data;
      assign {{rdata.name}}.ready = 1'b1;
      assign {{wdata.name}}.data[{{awaddr_w - wdata_byte_addr_w}}+:{{wdata_w}}] = bram_wr_data;
      assign {{wdata.name}}.data[{{awaddr_w - wdata_byte_addr_w + wdata_w}}] = bram_we_a;
    {% else %}
      assign bram_wr_data = {{wdata.name}}.data[{{awaddr_w - wdata_byte_addr_w}}+:{{wdata_w}}];
      assign bram_rd_data = bram_wr_data;
    {% endif %}

   assign {{wdata.name}}.data[{{awaddr_w-wdata_byte_addr_w-1}}:0] = bram_addr_a[{{awaddr_w-1}}:{{wdata_byte_addr_w}}];
   dtibram_{{name}} dtibram_{{name}}_i (
                    .s_axi_aclk(aclk),
                    .s_axi_aresetn(aresetn_axi),
                    .bram_en_a({{wdata.name}}.valid),
                    .bram_we_a(bram_we_a),
                    .bram_addr_a(bram_addr_a),
                    .bram_rddata_a(bram_rd_data),
                    .bram_wrdata_a(bram_wr_data),
                    .bram_clk_a(),
                    .bram_rst_a(),
                    {{axi_port_map|join(",\n")|indent(19, True)}}
    );

{%- endmacro %}

{% macro axis(name, direction, tdata) -%}

    {% set tdata_w = tdata.params['tdata'] %}
    {% set tlast_w = tdata.params.get('tlast', 0) %}

    {% if direction == "w" %}
      {% if tlast_w == 0 %}
assign {{name}}.data = {{name}}_tdata;
      {% else %}
assign {{name}}.data[{{tdata_w-1}}:0] = {{name}}_tdata;
assign {{name}}.data[{{tdata_w}}+:{{tlast_w}}] = {{tlast_w}}'({{name}}_tlast);
      {% endif %}
assign {{name}}.valid = {{name}}_tvalid;
assign {{name}}_tready = {{name}}.ready;
    {% else %}
      {% if tlast_w == 0 %}
assign {{name}}_tdata = {{name}}.data;
assign {{name}}_tlast = 1'b1;
      {% else %}
assign {{name}}_tdata = {{name}}.data[{{tdata_w-1}}:0];
assign {{name}}_tlast = &{{name}}.data[{{tdata_w}}+:{{tlast_w}}];
      {% endif %}
assign {{name}}_tvalid = {{name}}.valid;
assign {{name}}.ready = {{name}}_tready;
    {% endif %}

{%- endmacro %}
