#include "V{{top_name}}.h"
#include "verilated.h"
{% if tracing %}
#include "verilated_vcd_c.h"
{% endif %}
#include "stdio.h"
{# #define DEBUG     #}

extern "C" {

V{{top_name}}* top = NULL;
vluint64_t main_time = 0;

{% if tracing %}
VerilatedVcdC* tfp = NULL;
{% endif %}

void forward(void) {
#ifdef DEBUG
    printf("---- forward ----\n");
#endif
    top->eval();
}

void back(void) {
#ifdef DEBUG
    printf("---- back    ----\n");
#endif
    top->eval();
}

void cycle(void) {
#ifdef DEBUG
    printf("---- cycle   ----\n");
#endif
    top->eval();

{% if tracing %} 
    if (tfp) tfp->dump (main_time); 
{% endif %} 
    {# if (main_time > 5) { #}
        main_time+=5;
        top->clk = 0;
        top->eval();
    {# } #}
{% if tracing %} 
    if (tfp) tfp->dump (main_time); 
{% endif %} 

    main_time+=5;
    top->clk = 1;
{% if tracing %}  
    if (tfp) {  
{% if end_cycle_dump %}
      tfp->dump (main_time); 
{% endif %}
      tfp->flush();  
    }  
{% endif %}  

{% if aux_clock %}
    top->{{aux_clock[0].name}} = 1;
{%- endif %}

    top->eval();

{% if aux_clock %}
    top->{{aux_clock[0].name}} = 0;
    top->eval();
  {% for i in range(aux_clock[0].frequency-1) %}
    top->{{aux_clock[0].name}} = 1;
    top->eval();
    top->{{aux_clock[0].name}} = 0;
    top->eval();
  {% endfor %}
{%- endif %}
}

unsigned long init(const char* trace_fn, long seed) {
{% if not rst %}
    Verilated::randSeed(seed);
    Verilated::randReset(2);
{% endif %}

    top = new V{{top_name}};
    main_time = 0;
{% if tracing %}
    if (trace_fn) {
        Verilated::traceEverOn(true);
        tfp = new VerilatedVcdC;
        top->trace(tfp, 99);  // Trace 99 levels of hierarchy
        {# mkdir("logs", 0777); #}
#ifdef DEBUG
        printf("%p\n", tfp);
#endif
        tfp->open(trace_fn);  // Open the dump file
#ifdef DEBUG
        printf("tfp->open(%s)\n", trace_fn);
#endif
    }
{% endif %}

{% for p in out_ports -%}
    top->{{p.basename}}_ready = 0;
{% endfor %}

{% for p in in_ports -%}
    top->{{p.basename}}_valid = 0;
{% endfor %}

    top->rst = {{ 1 if rst else 0 }};
    top->eval();
    top->clk = 1;
{% if aux_clock %}
    top->{{aux_clock[0].name}} = 1;
{% endif %}
    top->eval();

{% if tracing %}
    if (tfp) {
{% if end_cycle_dump %}
        tfp->dump(0);
{% endif %}
        tfp->flush();
    }
{%- endif %}

{% if aux_clock %}
    top->{{aux_clock[0].name}} = 0;
    top->eval();
  {% for i in range(aux_clock[0].frequency-1) %}
    top->{{aux_clock[0].name}} = 1;
    top->eval();
    top->{{aux_clock[0].name}} = 0;
    top->eval();
  {% endfor %}
{%- endif %}

    {# main_time+=1; #}
    top->rst = 0;
    top->eval();

    {# main_time+=5; #}

    return (unsigned long)(top);
}

void final() {
    top->final();
{% if tracing %}
    if (tfp) {
        tfp->close(); tfp = NULL;
    }
{% endif %}
    delete top; top = NULL;
}

{% for p in in_ports -%}
  {% if p.dtype.width > 64 %}
void set_{{p.basename}}(uint32_t* data, uint valid) {
  {% elif p.dtype.width > 32 %}
void set_{{p.basename}}(vluint64_t data, uint valid) {
  {% else %}
void set_{{p.basename}}(uint32_t data, uint valid) {
  {% endif %}

  {% if p.dtype.width > 64 %}
    for (int i = 0; i < {{ (p.dtype.width + 31) // 32 }}; ++i) {
        top->{{p.basename}}_data[i] = data[i];
#ifdef DEBUG
        printf("{{p.basename}}_data: %x, Valid: %d\n", data[i], valid);
#endif
    }
  {% else %}

#ifdef DEBUG
    printf("{{p.basename}}_data: %lx, Valid: %d\n", data, valid);
#endif

    top->{{p.basename}}_data = data;
  {% endif %}

    top->{{p.basename}}_valid = valid;
}

int get_{{p.basename}}() {
    top->eval();
#ifdef DEBUG
    printf("{{p.basename}}_ready = %d\n", top->{{p.basename}}_ready);
#endif
    return top->{{p.basename}}_ready;
}

{% endfor %}

{% for p in out_ports -%}
int get_{{p.basename}}(uint32_t* data) {
  {% if p.dtype.width > 64 %}
    uint32_t* p_data = top->{{p.basename}}_data;
  {% elif p.dtype.width > 32 %}
    uint32_t* p_data = (uint32_t*) &top->{{p.basename}}_data;
  {% endif %}

  {% if p.dtype.width > 32 %}
    for (int i = 0; i < {{ (p.dtype.width + 31) // 32 }}; ++i) {
    data[i] = p_data[i];
    }
  {% else %}
    data[0] = top->{{p.basename}}_data;
  {% endif %}

#ifdef DEBUG
    printf("{{p.basename}}_data: %lx, Valid: %d\n", data[0], top->{{p.basename}}_valid);
#endif
    return top->{{p.basename}}_valid;
}

void set_{{p.basename}}(uint ready) {
#ifdef DEBUG
    printf("{{p.basename}}_ready = %d\n", ready);
#endif
    top->{{p.basename}}_ready = ready;
}
{% endfor %}
}
